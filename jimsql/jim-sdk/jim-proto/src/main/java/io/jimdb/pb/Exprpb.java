/*
 * Copyright 2019 The JIMDB Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dspb/expr.proto

package io.jimdb.pb;

public final class Exprpb {
  private Exprpb() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code dspb.ExprType}
   */
  public enum ExprType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>Invalid_Expr = 0;</code>
     */
    Invalid_Expr(0),
    /**
     * <code>Column = 1;</code>
     */
    Column(1),
    /**
     * <code>Const_Int = 2;</code>
     */
    Const_Int(2),
    /**
     * <code>Const_UInt = 3;</code>
     */
    Const_UInt(3),
    /**
     * <pre>
     * float or double
     * </pre>
     *
     * <code>Const_Double = 4;</code>
     */
    Const_Double(4),
    /**
     * <code>Const_Bytes = 5;</code>
     */
    Const_Bytes(5),
    /**
     * <code>Const_Decimal = 6;</code>
     */
    Const_Decimal(6),
    /**
     * <code>Const_Date = 7;</code>
     */
    Const_Date(7),
    /**
     * <code>Const_Time = 8;</code>
     */
    Const_Time(8),
    /**
     * <code>Equal = 20;</code>
     */
    Equal(20),
    /**
     * <code>NotEqual = 21;</code>
     */
    NotEqual(21),
    /**
     * <code>Less = 22;</code>
     */
    Less(22),
    /**
     * <code>LessOrEqual = 23;</code>
     */
    LessOrEqual(23),
    /**
     * <code>Larger = 24;</code>
     */
    Larger(24),
    /**
     * <code>LargerOrEqual = 25;</code>
     */
    LargerOrEqual(25),
    /**
     * <pre>
     * Aggregation
     * </pre>
     *
     * <code>Avg = 151;</code>
     */
    Avg(151),
    /**
     * <code>Count = 152;</code>
     */
    Count(152),
    /**
     * <code>Max = 153;</code>
     */
    Max(153),
    /**
     * <code>Min = 154;</code>
     */
    Min(154),
    /**
     * <code>Sum = 155;</code>
     */
    Sum(155),
    /**
     * <code>Std = 156;</code>
     */
    Std(156),
    /**
     * <code>Distinct = 157;</code>
     */
    Distinct(157),
    /**
     * <pre>
     * Logical Operators
     * </pre>
     *
     * <code>LogicAnd = 201;</code>
     */
    LogicAnd(201),
    /**
     * <code>LogicOr = 202;</code>
     */
    LogicOr(202),
    /**
     * <code>LogicNot = 203;</code>
     */
    LogicNot(203),
    /**
     * <code>LogicXor = 204;</code>
     */
    LogicXor(204),
    /**
     * <code>UnaryNot = 205;</code>
     */
    UnaryNot(205),
    /**
     * <code>UnaryMinus = 206;</code>
     */
    UnaryMinus(206),
    /**
     * <code>IsNull = 207;</code>
     */
    IsNull(207),
    /**
     * <code>DecimalIsNull = 208;</code>
     */
    DecimalIsNull(208),
    /**
     * <code>DateIsNull = 209;</code>
     */
    DateIsNull(209),
    /**
     * <code>RealIsNull = 210;</code>
     */
    RealIsNull(210),
    /**
     * <code>StringIsNull = 211;</code>
     */
    StringIsNull(211),
    /**
     * <code>TimeIsNull = 212;</code>
     */
    TimeIsNull(212),
    /**
     * <code>IntIsNull = 213;</code>
     */
    IntIsNull(213),
    /**
     * <code>JsonIsNull = 214;</code>
     */
    JsonIsNull(214),
    /**
     * <code>IsNotNull = 215;</code>
     */
    IsNotNull(215),
    /**
     * <code>IsTrue = 216;</code>
     */
    IsTrue(216),
    /**
     * <code>IsFalse = 217;</code>
     */
    IsFalse(217),
    /**
     * <code>LeftShift = 218;</code>
     */
    LeftShift(218),
    /**
     * <code>RightShift = 219;</code>
     */
    RightShift(219),
    /**
     * <pre>
     * casting
     * </pre>
     *
     * <code>CastIntToInt = 301;</code>
     */
    CastIntToInt(301),
    /**
     * <code>CastIntToReal = 302;</code>
     */
    CastIntToReal(302),
    /**
     * <code>CastIntToString = 303;</code>
     */
    CastIntToString(303),
    /**
     * <code>CastIntToDecimal = 304;</code>
     */
    CastIntToDecimal(304),
    /**
     * <code>CastIntToTime = 305;</code>
     */
    CastIntToTime(305),
    /**
     * <code>CastIntToDate = 306;</code>
     */
    CastIntToDate(306),
    /**
     * <code>CastIntToJson = 307;</code>
     */
    CastIntToJson(307),
    /**
     * <code>CastRealToInt = 308;</code>
     */
    CastRealToInt(308),
    /**
     * <code>CastRealToReal = 309;</code>
     */
    CastRealToReal(309),
    /**
     * <code>CastRealToString = 310;</code>
     */
    CastRealToString(310),
    /**
     * <code>CastRealToDecimal = 311;</code>
     */
    CastRealToDecimal(311),
    /**
     * <code>CastRealToTime = 312;</code>
     */
    CastRealToTime(312),
    /**
     * <code>CastRealToDate = 313;</code>
     */
    CastRealToDate(313),
    /**
     * <code>CastRealToJson = 314;</code>
     */
    CastRealToJson(314),
    /**
     * <code>CastDecimalToInt = 315;</code>
     */
    CastDecimalToInt(315),
    /**
     * <code>CastDecimalToReal = 316;</code>
     */
    CastDecimalToReal(316),
    /**
     * <code>CastDecimalToString = 317;</code>
     */
    CastDecimalToString(317),
    /**
     * <code>CastDecimalToDecimal = 318;</code>
     */
    CastDecimalToDecimal(318),
    /**
     * <code>CastDecimalToTime = 319;</code>
     */
    CastDecimalToTime(319),
    /**
     * <code>CastDecimalToDate = 320;</code>
     */
    CastDecimalToDate(320),
    /**
     * <code>CastDecimalToJson = 321;</code>
     */
    CastDecimalToJson(321),
    /**
     * <code>CastStringToInt = 322;</code>
     */
    CastStringToInt(322),
    /**
     * <code>CastStringToReal = 323;</code>
     */
    CastStringToReal(323),
    /**
     * <code>CastStringToString = 324;</code>
     */
    CastStringToString(324),
    /**
     * <code>CastStringToDecimal = 325;</code>
     */
    CastStringToDecimal(325),
    /**
     * <code>CastStringToTime = 326;</code>
     */
    CastStringToTime(326),
    /**
     * <code>CastStringToDate = 327;</code>
     */
    CastStringToDate(327),
    /**
     * <code>CastStringToJson = 328;</code>
     */
    CastStringToJson(328),
    /**
     * <code>CastTimeToInt = 329;</code>
     */
    CastTimeToInt(329),
    /**
     * <code>CastTimeToReal = 330;</code>
     */
    CastTimeToReal(330),
    /**
     * <code>CastTimeToString = 331;</code>
     */
    CastTimeToString(331),
    /**
     * <code>CastTimeToDecimal = 332;</code>
     */
    CastTimeToDecimal(332),
    /**
     * <code>CastTimeToTime = 333;</code>
     */
    CastTimeToTime(333),
    /**
     * <code>CastTimeToDate = 334;</code>
     */
    CastTimeToDate(334),
    /**
     * <code>CastTimeToJson = 335;</code>
     */
    CastTimeToJson(335),
    /**
     * <code>CastDateToInt = 336;</code>
     */
    CastDateToInt(336),
    /**
     * <code>CastDateToReal = 337;</code>
     */
    CastDateToReal(337),
    /**
     * <code>CastDateToString = 338;</code>
     */
    CastDateToString(338),
    /**
     * <code>CastDateToDecimal = 339;</code>
     */
    CastDateToDecimal(339),
    /**
     * <code>CastDateToTime = 340;</code>
     */
    CastDateToTime(340),
    /**
     * <code>CastDateToDate = 341;</code>
     */
    CastDateToDate(341),
    /**
     * <code>CastDateToJson = 342;</code>
     */
    CastDateToJson(342),
    /**
     * <code>CastJsonToInt = 343;</code>
     */
    CastJsonToInt(343),
    /**
     * <code>CastJsonToReal = 344;</code>
     */
    CastJsonToReal(344),
    /**
     * <code>CastJsonToString = 345;</code>
     */
    CastJsonToString(345),
    /**
     * <code>CastJsonToDecimal = 346;</code>
     */
    CastJsonToDecimal(346),
    /**
     * <code>CastJsonToTime = 347;</code>
     */
    CastJsonToTime(347),
    /**
     * <code>CastJsonToDate = 348;</code>
     */
    CastJsonToDate(348),
    /**
     * <code>CastJsonToJson = 349;</code>
     */
    CastJsonToJson(349),
    /**
     * <pre>
     * Comparison Functions and Operators
     * </pre>
     *
     * <code>Coalesce = 401;</code>
     */
    Coalesce(401),
    /**
     * <code>EqualInt = 402;</code>
     */
    EqualInt(402),
    /**
     * <code>EqualReal = 403;</code>
     */
    EqualReal(403),
    /**
     * <code>EqualString = 404;</code>
     */
    EqualString(404),
    /**
     * <code>EqualDecimal = 405;</code>
     */
    EqualDecimal(405),
    /**
     * <code>EqualTime = 406;</code>
     */
    EqualTime(406),
    /**
     * <code>EqualDate = 407;</code>
     */
    EqualDate(407),
    /**
     * <code>EqualJson = 408;</code>
     */
    EqualJson(408),
    /**
     * <code>NotEqualInt = 409;</code>
     */
    NotEqualInt(409),
    /**
     * <code>NotEqualReal = 410;</code>
     */
    NotEqualReal(410),
    /**
     * <code>NotEqualDecimal = 411;</code>
     */
    NotEqualDecimal(411),
    /**
     * <code>NotEqualString = 412;</code>
     */
    NotEqualString(412),
    /**
     * <code>NotEqualTime = 413;</code>
     */
    NotEqualTime(413),
    /**
     * <code>NotEqualDate = 414;</code>
     */
    NotEqualDate(414),
    /**
     * <code>NotEqualJson = 415;</code>
     */
    NotEqualJson(415),
    /**
     * <code>LessInt = 416;</code>
     */
    LessInt(416),
    /**
     * <code>LessReal = 417;</code>
     */
    LessReal(417),
    /**
     * <code>LessDecimal = 418;</code>
     */
    LessDecimal(418),
    /**
     * <code>LessString = 419;</code>
     */
    LessString(419),
    /**
     * <code>LessTime = 420;</code>
     */
    LessTime(420),
    /**
     * <code>LessDate = 421;</code>
     */
    LessDate(421),
    /**
     * <code>LessJson = 422;</code>
     */
    LessJson(422),
    /**
     * <code>LessOrEqualInt = 423;</code>
     */
    LessOrEqualInt(423),
    /**
     * <code>LessOrEqualReal = 424;</code>
     */
    LessOrEqualReal(424),
    /**
     * <code>LessOrEqualDecimal = 425;</code>
     */
    LessOrEqualDecimal(425),
    /**
     * <code>LessOrEqualString = 426;</code>
     */
    LessOrEqualString(426),
    /**
     * <code>LessOrEqualTime = 427;</code>
     */
    LessOrEqualTime(427),
    /**
     * <code>LessOrEqualDate = 428;</code>
     */
    LessOrEqualDate(428),
    /**
     * <code>LessOrEqualJson = 429;</code>
     */
    LessOrEqualJson(429),
    /**
     * <code>GreaterInt = 430;</code>
     */
    GreaterInt(430),
    /**
     * <code>GreaterReal = 431;</code>
     */
    GreaterReal(431),
    /**
     * <code>GreaterDecimal = 432;</code>
     */
    GreaterDecimal(432),
    /**
     * <code>GreaterString = 433;</code>
     */
    GreaterString(433),
    /**
     * <code>GreaterTime = 434;</code>
     */
    GreaterTime(434),
    /**
     * <code>GreaterDate = 435;</code>
     */
    GreaterDate(435),
    /**
     * <code>GreaterJson = 436;</code>
     */
    GreaterJson(436),
    /**
     * <code>GreaterOrEqualInt = 437;</code>
     */
    GreaterOrEqualInt(437),
    /**
     * <code>GreaterOrEqualReal = 438;</code>
     */
    GreaterOrEqualReal(438),
    /**
     * <code>GreaterOrEqualDecimal = 439;</code>
     */
    GreaterOrEqualDecimal(439),
    /**
     * <code>GreaterOrEqualString = 440;</code>
     */
    GreaterOrEqualString(440),
    /**
     * <code>GreaterOrEqualTime = 441;</code>
     */
    GreaterOrEqualTime(441),
    /**
     * <code>GreaterOrEqualDate = 442;</code>
     */
    GreaterOrEqualDate(442),
    /**
     * <code>GreaterOrEqualJson = 443;</code>
     */
    GreaterOrEqualJson(443),
    /**
     * <code>Like = 444;</code>
     */
    Like(444),
    /**
     * <code>NotLike = 445;</code>
     */
    NotLike(445),
    /**
     * <code>RegexpLike = 446;</code>
     */
    RegexpLike(446),
    /**
     * <code>Regexp = 447;</code>
     */
    Regexp(447),
    /**
     * <code>NotRegexp = 448;</code>
     */
    NotRegexp(448),
    /**
     * <code>IN = 449;</code>
     */
    IN(449),
    /**
     * <pre>
     * Arithmetic Operator
     * </pre>
     *
     * <code>Plus = 551;</code>
     */
    Plus(551),
    /**
     * <code>PlusReal = 552;</code>
     */
    PlusReal(552),
    /**
     * <code>PlusDecimal = 553;</code>
     */
    PlusDecimal(553),
    /**
     * <code>PlusInt = 554;</code>
     */
    PlusInt(554),
    /**
     * <code>Minus = 561;</code>
     */
    Minus(561),
    /**
     * <code>MinusReal = 562;</code>
     */
    MinusReal(562),
    /**
     * <code>MinusDecimal = 563;</code>
     */
    MinusDecimal(563),
    /**
     * <code>MinusInt = 564;</code>
     */
    MinusInt(564),
    /**
     * <code>Mult = 571;</code>
     */
    Mult(571),
    /**
     * <code>MultReal = 572;</code>
     */
    MultReal(572),
    /**
     * <code>MultDecimal = 573;</code>
     */
    MultDecimal(573),
    /**
     * <code>MultInt = 574;</code>
     */
    MultInt(574),
    /**
     * <code>MultIntUnsigned = 575;</code>
     */
    MultIntUnsigned(575),
    /**
     * <code>Div = 581;</code>
     */
    Div(581),
    /**
     * <code>DivReal = 582;</code>
     */
    DivReal(582),
    /**
     * <code>DivDecimal = 583;</code>
     */
    DivDecimal(583),
    /**
     * <code>IntDivInt = 584;</code>
     */
    IntDivInt(584),
    /**
     * <code>IntDivDecimal = 585;</code>
     */
    IntDivDecimal(585),
    /**
     * <code>Mod = 591;</code>
     */
    Mod(591),
    /**
     * <code>ModReal = 592;</code>
     */
    ModReal(592),
    /**
     * <code>ModDecimal = 593;</code>
     */
    ModDecimal(593),
    /**
     * <code>ModInt = 594;</code>
     */
    ModInt(594),
    /**
     * <pre>
     * Mathematical Functions
     * </pre>
     *
     * <code>Abs = 701;</code>
     */
    Abs(701),
    /**
     * <code>Ceil = 702;</code>
     */
    Ceil(702),
    /**
     * <code>Floor = 703;</code>
     */
    Floor(703),
    /**
     * <code>Round = 704;</code>
     */
    Round(704),
    /**
     * <code>Rand = 705;</code>
     */
    Rand(705),
    /**
     * <code>Conv = 706;</code>
     */
    Conv(706),
    /**
     * <code>CRC32 = 707;</code>
     */
    CRC32(707),
    /**
     * <code>Degrees = 708;</code>
     */
    Degrees(708),
    /**
     * <code>Exp = 709;</code>
     */
    Exp(709),
    /**
     * <code>Acos = 710;</code>
     */
    Acos(710),
    /**
     * <code>Asin = 711;</code>
     */
    Asin(711),
    /**
     * <code>Atan = 712;</code>
     */
    Atan(712),
    /**
     * <code>Atan2 = 713;</code>
     */
    Atan2(713),
    /**
     * <code>Cos = 714;</code>
     */
    Cos(714),
    /**
     * <code>Cot = 715;</code>
     */
    Cot(715),
    /**
     * <code>Ln = 716;</code>
     */
    Ln(716),
    /**
     * <code>Log = 717;</code>
     */
    Log(717),
    /**
     * <code>Log10 = 718;</code>
     */
    Log10(718),
    /**
     * <code>Log2 = 719;</code>
     */
    Log2(719),
    /**
     * <code>PI = 720;</code>
     */
    PI(720),
    /**
     * <code>Pow = 721;</code>
     */
    Pow(721),
    /**
     * <code>Radians = 722;</code>
     */
    Radians(722),
    /**
     * <code>Sign = 723;</code>
     */
    Sign(723),
    /**
     * <code>Sin = 724;</code>
     */
    Sin(724),
    /**
     * <code>Sqrt = 725;</code>
     */
    Sqrt(725),
    /**
     * <code>Tan = 726;</code>
     */
    Tan(726),
    /**
     * <code>Truncate = 727;</code>
     */
    Truncate(727),
    /**
     * <pre>
     * control flow functions
     * </pre>
     *
     * <code>CaseWhen = 751;</code>
     */
    CaseWhen(751),
    /**
     * <code>If = 752;</code>
     */
    If(752),
    /**
     * <code>IfInt = 753;</code>
     */
    IfInt(753),
    /**
     * <code>IfReal = 754;</code>
     */
    IfReal(754),
    /**
     * <code>IfDecimal = 755;</code>
     */
    IfDecimal(755),
    /**
     * <code>IfString = 756;</code>
     */
    IfString(756),
    /**
     * <code>IfTime = 757;</code>
     */
    IfTime(757),
    /**
     * <code>IfDate = 758;</code>
     */
    IfDate(758),
    /**
     * <code>IfNullJson = 759;</code>
     */
    IfNullJson(759),
    /**
     * <code>IfJson = 760;</code>
     */
    IfJson(760),
    /**
     * <code>IfNull = 761;</code>
     */
    IfNull(761),
    /**
     * <pre>
     * Encryption and Compression Functions
     * </pre>
     *
     * <code>Aes_decrypt = 901;</code>
     */
    Aes_decrypt(901),
    /**
     * <code>Aes_encrypt = 902;</code>
     */
    Aes_encrypt(902),
    /**
     * <code>Compress = 903;</code>
     */
    Compress(903),
    /**
     * <code>Uncompress = 904;</code>
     */
    Uncompress(904),
    /**
     * <code>Md5 = 905;</code>
     */
    Md5(905),
    /**
     * <code>Password = 906;</code>
     */
    Password(906),
    /**
     * <code>SHA1 = 907;</code>
     */
    SHA1(907),
    /**
     * <code>SHA2 = 908;</code>
     */
    SHA2(908),
    /**
     * <pre>
     * String Comparison Functions and Operators
     * </pre>
     *
     * <code>Ascii = 1201;</code>
     */
    Ascii(1201),
    /**
     * <code>Bin = 1202;</code>
     */
    Bin(1202),
    /**
     * <code>Bit_length = 1203;</code>
     */
    Bit_length(1203),
    /**
     * <code>Char = 1204;</code>
     */
    Char(1204),
    /**
     * <code>Char_length = 1205;</code>
     */
    Char_length(1205),
    /**
     * <code>Character_length = 1206;</code>
     */
    Character_length(1206),
    /**
     * <code>Concat = 1207;</code>
     */
    Concat(1207),
    /**
     * <code>Concat_ws = 1208;</code>
     */
    Concat_ws(1208),
    /**
     * <code>Elt = 1209;</code>
     */
    Elt(1209),
    /**
     * <code>Export_set = 1210;</code>
     */
    Export_set(1210),
    /**
     * <code>Field = 1211;</code>
     */
    Field(1211),
    /**
     * <code>Find_in_set = 1212;</code>
     */
    Find_in_set(1212),
    /**
     * <code>Format = 1213;</code>
     */
    Format(1213),
    /**
     * <code>From_base64 = 1214;</code>
     */
    From_base64(1214),
    /**
     * <code>Hex = 1215;</code>
     */
    Hex(1215),
    /**
     * <code>Insert = 1216;</code>
     */
    Insert(1216),
    /**
     * <code>Instr = 1217;</code>
     */
    Instr(1217),
    /**
     * <code>Lcase = 1218;</code>
     */
    Lcase(1218),
    /**
     * <code>Left = 1219;</code>
     */
    Left(1219),
    /**
     * <code>Length = 1220;</code>
     */
    Length(1220),
    /**
     * <code>Str_Like = 1221;</code>
     */
    Str_Like(1221),
    /**
     * <code>Load_file = 1222;</code>
     */
    Load_file(1222),
    /**
     * <code>Locate = 1223;</code>
     */
    Locate(1223),
    /**
     * <code>Lower = 1224;</code>
     */
    Lower(1224),
    /**
     * <code>Lpad = 1225;</code>
     */
    Lpad(1225),
    /**
     * <code>Ltrim = 1226;</code>
     */
    Ltrim(1226),
    /**
     * <code>Make_set = 1227;</code>
     */
    Make_set(1227),
    /**
     * <code>Match = 1228;</code>
     */
    Match(1228),
    /**
     * <code>Mid = 1229;</code>
     */
    Mid(1229),
    /**
     * <code>Str_Not_like = 1230;</code>
     */
    Str_Not_like(1230),
    /**
     * <code>Str_Not_regexp = 1231;</code>
     */
    Str_Not_regexp(1231),
    /**
     * <code>Oct = 1232;</code>
     */
    Oct(1232),
    /**
     * <code>Octet_length = 1233;</code>
     */
    Octet_length(1233),
    /**
     * <code>Ord = 1234;</code>
     */
    Ord(1234),
    /**
     * <code>Position = 1235;</code>
     */
    Position(1235),
    /**
     * <code>Quote = 1236;</code>
     */
    Quote(1236),
    /**
     * <code>StrRegexp = 1237;</code>
     */
    StrRegexp(1237),
    /**
     * <code>Repeat = 1238;</code>
     */
    Repeat(1238),
    /**
     * <code>Replace = 1239;</code>
     */
    Replace(1239),
    /**
     * <code>Reverse = 1240;</code>
     */
    Reverse(1240),
    /**
     * <code>Right = 1241;</code>
     */
    Right(1241),
    /**
     * <code>Rlike = 1242;</code>
     */
    Rlike(1242),
    /**
     * <code>Rpad = 1243;</code>
     */
    Rpad(1243),
    /**
     * <code>Rtrim = 1244;</code>
     */
    Rtrim(1244),
    /**
     * <code>Soundex = 1245;</code>
     */
    Soundex(1245),
    /**
     * <code>SoundsLike = 1246;</code>
     */
    SoundsLike(1246),
    /**
     * <code>Space = 1247;</code>
     */
    Space(1247),
    /**
     * <code>Strcmp = 1248;</code>
     */
    Strcmp(1248),
    /**
     * <code>Substr = 1249;</code>
     */
    Substr(1249),
    /**
     * <code>Substring = 1250;</code>
     */
    Substring(1250),
    /**
     * <code>SubstringIndex = 1251;</code>
     */
    SubstringIndex(1251),
    /**
     * <code>ToBase64 = 1252;</code>
     */
    ToBase64(1252),
    /**
     * <code>Trim = 1253;</code>
     */
    Trim(1253),
    /**
     * <code>Ucase = 1254;</code>
     */
    Ucase(1254),
    /**
     * <code>Unhex = 1255;</code>
     */
    Unhex(1255),
    /**
     * <code>Upper = 1256;</code>
     */
    Upper(1256),
    /**
     * <code>WeightString = 1257;</code>
     */
    WeightString(1257),
    /**
     * <pre>
     * Date and Time Functions
     * </pre>
     *
     * <code>Adddate = 2001;</code>
     */
    Adddate(2001),
    /**
     * <code>Addtime = 2002;</code>
     */
    Addtime(2002),
    /**
     * <code>Convert_tz = 2003;</code>
     */
    Convert_tz(2003),
    /**
     * <code>Curdate = 2004;</code>
     */
    Curdate(2004),
    /**
     * <code>CurrentDate = 2005;</code>
     */
    CurrentDate(2005),
    /**
     * <code>CurrentTime = 2006;</code>
     */
    CurrentTime(2006),
    /**
     * <code>CurrentTimestamp = 2007;</code>
     */
    CurrentTimestamp(2007),
    /**
     * <code>Curtime = 2008;</code>
     */
    Curtime(2008),
    /**
     * <code>Date = 2009;</code>
     */
    Date(2009),
    /**
     * <code>Date_add = 2010;</code>
     */
    Date_add(2010),
    /**
     * <code>Date_format = 2011;</code>
     */
    Date_format(2011),
    /**
     * <code>Date_sub = 2012;</code>
     */
    Date_sub(2012),
    /**
     * <code>Datediff = 2013;</code>
     */
    Datediff(2013),
    /**
     * <code>Day = 2014;</code>
     */
    Day(2014),
    /**
     * <code>Dayname = 2015;</code>
     */
    Dayname(2015),
    /**
     * <code>Dayofmonth = 2016;</code>
     */
    Dayofmonth(2016),
    /**
     * <code>Dayofweek = 2017;</code>
     */
    Dayofweek(2017),
    /**
     * <code>Dayofyear = 2018;</code>
     */
    Dayofyear(2018),
    /**
     * <code>Extract = 2019;</code>
     */
    Extract(2019),
    /**
     * <code>From_days = 2020;</code>
     */
    From_days(2020),
    /**
     * <code>From_unixtime = 2021;</code>
     */
    From_unixtime(2021),
    /**
     * <code>Get_format = 2022;</code>
     */
    Get_format(2022),
    /**
     * <code>Hour = 2023;</code>
     */
    Hour(2023),
    /**
     * <code>Last_day = 2024;</code>
     */
    Last_day(2024),
    /**
     * <code>Localtime = 2025;</code>
     */
    Localtime(2025),
    /**
     * <code>Localtimestamp = 2026;</code>
     */
    Localtimestamp(2026),
    /**
     * <code>Makedate = 2027;</code>
     */
    Makedate(2027),
    /**
     * <code>Maketime = 2028;</code>
     */
    Maketime(2028),
    /**
     * <code>Microsecond = 2029;</code>
     */
    Microsecond(2029),
    /**
     * <code>Minute = 2030;</code>
     */
    Minute(2030),
    /**
     * <code>Month = 2031;</code>
     */
    Month(2031),
    /**
     * <code>Monthname = 2032;</code>
     */
    Monthname(2032),
    /**
     * <code>Now = 2033;</code>
     */
    Now(2033),
    /**
     * <code>Period_add = 2034;</code>
     */
    Period_add(2034),
    /**
     * <code>Period_diff = 2035;</code>
     */
    Period_diff(2035),
    /**
     * <code>Quarter = 2036;</code>
     */
    Quarter(2036),
    /**
     * <code>Sec_to_time = 2037;</code>
     */
    Sec_to_time(2037),
    /**
     * <code>Second = 2038;</code>
     */
    Second(2038),
    /**
     * <code>Str_to_date = 2039;</code>
     */
    Str_to_date(2039),
    /**
     * <code>Subdate = 2040;</code>
     */
    Subdate(2040),
    /**
     * <code>Subtime = 2041;</code>
     */
    Subtime(2041),
    /**
     * <code>Sysdate = 2042;</code>
     */
    Sysdate(2042),
    /**
     * <code>Time = 2043;</code>
     */
    Time(2043),
    /**
     * <code>Time_format = 2044;</code>
     */
    Time_format(2044),
    /**
     * <code>Time_to_sec = 2045;</code>
     */
    Time_to_sec(2045),
    /**
     * <code>Timediff = 2046;</code>
     */
    Timediff(2046),
    /**
     * <code>Timestamp = 2047;</code>
     */
    Timestamp(2047),
    /**
     * <code>Timestampadd = 2048;</code>
     */
    Timestampadd(2048),
    /**
     * <code>Timestampdiff = 2049;</code>
     */
    Timestampdiff(2049),
    /**
     * <code>To_days = 2050;</code>
     */
    To_days(2050),
    /**
     * <code>To_seconds = 2051;</code>
     */
    To_seconds(2051),
    /**
     * <code>Unix_timestamp = 2052;</code>
     */
    Unix_timestamp(2052),
    /**
     * <code>Utc_date = 2053;</code>
     */
    Utc_date(2053),
    /**
     * <code>Utc_time = 2054;</code>
     */
    Utc_time(2054),
    /**
     * <code>Utc_timestamp = 2055;</code>
     */
    Utc_timestamp(2055),
    /**
     * <code>Week = 2056;</code>
     */
    Week(2056),
    /**
     * <code>Weekday = 2057;</code>
     */
    Weekday(2057),
    /**
     * <code>Weekofyear = 2058;</code>
     */
    Weekofyear(2058),
    /**
     * <code>Year = 2059;</code>
     */
    Year(2059),
    /**
     * <code>Yearweek = 2060;</code>
     */
    Yearweek(2060),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>Invalid_Expr = 0;</code>
     */
    public static final int Invalid_Expr_VALUE = 0;
    /**
     * <code>Column = 1;</code>
     */
    public static final int Column_VALUE = 1;
    /**
     * <code>Const_Int = 2;</code>
     */
    public static final int Const_Int_VALUE = 2;
    /**
     * <code>Const_UInt = 3;</code>
     */
    public static final int Const_UInt_VALUE = 3;
    /**
     * <pre>
     * float or double
     * </pre>
     *
     * <code>Const_Double = 4;</code>
     */
    public static final int Const_Double_VALUE = 4;
    /**
     * <code>Const_Bytes = 5;</code>
     */
    public static final int Const_Bytes_VALUE = 5;
    /**
     * <code>Const_Decimal = 6;</code>
     */
    public static final int Const_Decimal_VALUE = 6;
    /**
     * <code>Const_Date = 7;</code>
     */
    public static final int Const_Date_VALUE = 7;
    /**
     * <code>Const_Time = 8;</code>
     */
    public static final int Const_Time_VALUE = 8;
    /**
     * <code>Equal = 20;</code>
     */
    public static final int Equal_VALUE = 20;
    /**
     * <code>NotEqual = 21;</code>
     */
    public static final int NotEqual_VALUE = 21;
    /**
     * <code>Less = 22;</code>
     */
    public static final int Less_VALUE = 22;
    /**
     * <code>LessOrEqual = 23;</code>
     */
    public static final int LessOrEqual_VALUE = 23;
    /**
     * <code>Larger = 24;</code>
     */
    public static final int Larger_VALUE = 24;
    /**
     * <code>LargerOrEqual = 25;</code>
     */
    public static final int LargerOrEqual_VALUE = 25;
    /**
     * <pre>
     * Aggregation
     * </pre>
     *
     * <code>Avg = 151;</code>
     */
    public static final int Avg_VALUE = 151;
    /**
     * <code>Count = 152;</code>
     */
    public static final int Count_VALUE = 152;
    /**
     * <code>Max = 153;</code>
     */
    public static final int Max_VALUE = 153;
    /**
     * <code>Min = 154;</code>
     */
    public static final int Min_VALUE = 154;
    /**
     * <code>Sum = 155;</code>
     */
    public static final int Sum_VALUE = 155;
    /**
     * <code>Std = 156;</code>
     */
    public static final int Std_VALUE = 156;
    /**
     * <code>Distinct = 157;</code>
     */
    public static final int Distinct_VALUE = 157;
    /**
     * <pre>
     * Logical Operators
     * </pre>
     *
     * <code>LogicAnd = 201;</code>
     */
    public static final int LogicAnd_VALUE = 201;
    /**
     * <code>LogicOr = 202;</code>
     */
    public static final int LogicOr_VALUE = 202;
    /**
     * <code>LogicNot = 203;</code>
     */
    public static final int LogicNot_VALUE = 203;
    /**
     * <code>LogicXor = 204;</code>
     */
    public static final int LogicXor_VALUE = 204;
    /**
     * <code>UnaryNot = 205;</code>
     */
    public static final int UnaryNot_VALUE = 205;
    /**
     * <code>UnaryMinus = 206;</code>
     */
    public static final int UnaryMinus_VALUE = 206;
    /**
     * <code>IsNull = 207;</code>
     */
    public static final int IsNull_VALUE = 207;
    /**
     * <code>DecimalIsNull = 208;</code>
     */
    public static final int DecimalIsNull_VALUE = 208;
    /**
     * <code>DateIsNull = 209;</code>
     */
    public static final int DateIsNull_VALUE = 209;
    /**
     * <code>RealIsNull = 210;</code>
     */
    public static final int RealIsNull_VALUE = 210;
    /**
     * <code>StringIsNull = 211;</code>
     */
    public static final int StringIsNull_VALUE = 211;
    /**
     * <code>TimeIsNull = 212;</code>
     */
    public static final int TimeIsNull_VALUE = 212;
    /**
     * <code>IntIsNull = 213;</code>
     */
    public static final int IntIsNull_VALUE = 213;
    /**
     * <code>JsonIsNull = 214;</code>
     */
    public static final int JsonIsNull_VALUE = 214;
    /**
     * <code>IsNotNull = 215;</code>
     */
    public static final int IsNotNull_VALUE = 215;
    /**
     * <code>IsTrue = 216;</code>
     */
    public static final int IsTrue_VALUE = 216;
    /**
     * <code>IsFalse = 217;</code>
     */
    public static final int IsFalse_VALUE = 217;
    /**
     * <code>LeftShift = 218;</code>
     */
    public static final int LeftShift_VALUE = 218;
    /**
     * <code>RightShift = 219;</code>
     */
    public static final int RightShift_VALUE = 219;
    /**
     * <pre>
     * casting
     * </pre>
     *
     * <code>CastIntToInt = 301;</code>
     */
    public static final int CastIntToInt_VALUE = 301;
    /**
     * <code>CastIntToReal = 302;</code>
     */
    public static final int CastIntToReal_VALUE = 302;
    /**
     * <code>CastIntToString = 303;</code>
     */
    public static final int CastIntToString_VALUE = 303;
    /**
     * <code>CastIntToDecimal = 304;</code>
     */
    public static final int CastIntToDecimal_VALUE = 304;
    /**
     * <code>CastIntToTime = 305;</code>
     */
    public static final int CastIntToTime_VALUE = 305;
    /**
     * <code>CastIntToDate = 306;</code>
     */
    public static final int CastIntToDate_VALUE = 306;
    /**
     * <code>CastIntToJson = 307;</code>
     */
    public static final int CastIntToJson_VALUE = 307;
    /**
     * <code>CastRealToInt = 308;</code>
     */
    public static final int CastRealToInt_VALUE = 308;
    /**
     * <code>CastRealToReal = 309;</code>
     */
    public static final int CastRealToReal_VALUE = 309;
    /**
     * <code>CastRealToString = 310;</code>
     */
    public static final int CastRealToString_VALUE = 310;
    /**
     * <code>CastRealToDecimal = 311;</code>
     */
    public static final int CastRealToDecimal_VALUE = 311;
    /**
     * <code>CastRealToTime = 312;</code>
     */
    public static final int CastRealToTime_VALUE = 312;
    /**
     * <code>CastRealToDate = 313;</code>
     */
    public static final int CastRealToDate_VALUE = 313;
    /**
     * <code>CastRealToJson = 314;</code>
     */
    public static final int CastRealToJson_VALUE = 314;
    /**
     * <code>CastDecimalToInt = 315;</code>
     */
    public static final int CastDecimalToInt_VALUE = 315;
    /**
     * <code>CastDecimalToReal = 316;</code>
     */
    public static final int CastDecimalToReal_VALUE = 316;
    /**
     * <code>CastDecimalToString = 317;</code>
     */
    public static final int CastDecimalToString_VALUE = 317;
    /**
     * <code>CastDecimalToDecimal = 318;</code>
     */
    public static final int CastDecimalToDecimal_VALUE = 318;
    /**
     * <code>CastDecimalToTime = 319;</code>
     */
    public static final int CastDecimalToTime_VALUE = 319;
    /**
     * <code>CastDecimalToDate = 320;</code>
     */
    public static final int CastDecimalToDate_VALUE = 320;
    /**
     * <code>CastDecimalToJson = 321;</code>
     */
    public static final int CastDecimalToJson_VALUE = 321;
    /**
     * <code>CastStringToInt = 322;</code>
     */
    public static final int CastStringToInt_VALUE = 322;
    /**
     * <code>CastStringToReal = 323;</code>
     */
    public static final int CastStringToReal_VALUE = 323;
    /**
     * <code>CastStringToString = 324;</code>
     */
    public static final int CastStringToString_VALUE = 324;
    /**
     * <code>CastStringToDecimal = 325;</code>
     */
    public static final int CastStringToDecimal_VALUE = 325;
    /**
     * <code>CastStringToTime = 326;</code>
     */
    public static final int CastStringToTime_VALUE = 326;
    /**
     * <code>CastStringToDate = 327;</code>
     */
    public static final int CastStringToDate_VALUE = 327;
    /**
     * <code>CastStringToJson = 328;</code>
     */
    public static final int CastStringToJson_VALUE = 328;
    /**
     * <code>CastTimeToInt = 329;</code>
     */
    public static final int CastTimeToInt_VALUE = 329;
    /**
     * <code>CastTimeToReal = 330;</code>
     */
    public static final int CastTimeToReal_VALUE = 330;
    /**
     * <code>CastTimeToString = 331;</code>
     */
    public static final int CastTimeToString_VALUE = 331;
    /**
     * <code>CastTimeToDecimal = 332;</code>
     */
    public static final int CastTimeToDecimal_VALUE = 332;
    /**
     * <code>CastTimeToTime = 333;</code>
     */
    public static final int CastTimeToTime_VALUE = 333;
    /**
     * <code>CastTimeToDate = 334;</code>
     */
    public static final int CastTimeToDate_VALUE = 334;
    /**
     * <code>CastTimeToJson = 335;</code>
     */
    public static final int CastTimeToJson_VALUE = 335;
    /**
     * <code>CastDateToInt = 336;</code>
     */
    public static final int CastDateToInt_VALUE = 336;
    /**
     * <code>CastDateToReal = 337;</code>
     */
    public static final int CastDateToReal_VALUE = 337;
    /**
     * <code>CastDateToString = 338;</code>
     */
    public static final int CastDateToString_VALUE = 338;
    /**
     * <code>CastDateToDecimal = 339;</code>
     */
    public static final int CastDateToDecimal_VALUE = 339;
    /**
     * <code>CastDateToTime = 340;</code>
     */
    public static final int CastDateToTime_VALUE = 340;
    /**
     * <code>CastDateToDate = 341;</code>
     */
    public static final int CastDateToDate_VALUE = 341;
    /**
     * <code>CastDateToJson = 342;</code>
     */
    public static final int CastDateToJson_VALUE = 342;
    /**
     * <code>CastJsonToInt = 343;</code>
     */
    public static final int CastJsonToInt_VALUE = 343;
    /**
     * <code>CastJsonToReal = 344;</code>
     */
    public static final int CastJsonToReal_VALUE = 344;
    /**
     * <code>CastJsonToString = 345;</code>
     */
    public static final int CastJsonToString_VALUE = 345;
    /**
     * <code>CastJsonToDecimal = 346;</code>
     */
    public static final int CastJsonToDecimal_VALUE = 346;
    /**
     * <code>CastJsonToTime = 347;</code>
     */
    public static final int CastJsonToTime_VALUE = 347;
    /**
     * <code>CastJsonToDate = 348;</code>
     */
    public static final int CastJsonToDate_VALUE = 348;
    /**
     * <code>CastJsonToJson = 349;</code>
     */
    public static final int CastJsonToJson_VALUE = 349;
    /**
     * <pre>
     * Comparison Functions and Operators
     * </pre>
     *
     * <code>Coalesce = 401;</code>
     */
    public static final int Coalesce_VALUE = 401;
    /**
     * <code>EqualInt = 402;</code>
     */
    public static final int EqualInt_VALUE = 402;
    /**
     * <code>EqualReal = 403;</code>
     */
    public static final int EqualReal_VALUE = 403;
    /**
     * <code>EqualString = 404;</code>
     */
    public static final int EqualString_VALUE = 404;
    /**
     * <code>EqualDecimal = 405;</code>
     */
    public static final int EqualDecimal_VALUE = 405;
    /**
     * <code>EqualTime = 406;</code>
     */
    public static final int EqualTime_VALUE = 406;
    /**
     * <code>EqualDate = 407;</code>
     */
    public static final int EqualDate_VALUE = 407;
    /**
     * <code>EqualJson = 408;</code>
     */
    public static final int EqualJson_VALUE = 408;
    /**
     * <code>NotEqualInt = 409;</code>
     */
    public static final int NotEqualInt_VALUE = 409;
    /**
     * <code>NotEqualReal = 410;</code>
     */
    public static final int NotEqualReal_VALUE = 410;
    /**
     * <code>NotEqualDecimal = 411;</code>
     */
    public static final int NotEqualDecimal_VALUE = 411;
    /**
     * <code>NotEqualString = 412;</code>
     */
    public static final int NotEqualString_VALUE = 412;
    /**
     * <code>NotEqualTime = 413;</code>
     */
    public static final int NotEqualTime_VALUE = 413;
    /**
     * <code>NotEqualDate = 414;</code>
     */
    public static final int NotEqualDate_VALUE = 414;
    /**
     * <code>NotEqualJson = 415;</code>
     */
    public static final int NotEqualJson_VALUE = 415;
    /**
     * <code>LessInt = 416;</code>
     */
    public static final int LessInt_VALUE = 416;
    /**
     * <code>LessReal = 417;</code>
     */
    public static final int LessReal_VALUE = 417;
    /**
     * <code>LessDecimal = 418;</code>
     */
    public static final int LessDecimal_VALUE = 418;
    /**
     * <code>LessString = 419;</code>
     */
    public static final int LessString_VALUE = 419;
    /**
     * <code>LessTime = 420;</code>
     */
    public static final int LessTime_VALUE = 420;
    /**
     * <code>LessDate = 421;</code>
     */
    public static final int LessDate_VALUE = 421;
    /**
     * <code>LessJson = 422;</code>
     */
    public static final int LessJson_VALUE = 422;
    /**
     * <code>LessOrEqualInt = 423;</code>
     */
    public static final int LessOrEqualInt_VALUE = 423;
    /**
     * <code>LessOrEqualReal = 424;</code>
     */
    public static final int LessOrEqualReal_VALUE = 424;
    /**
     * <code>LessOrEqualDecimal = 425;</code>
     */
    public static final int LessOrEqualDecimal_VALUE = 425;
    /**
     * <code>LessOrEqualString = 426;</code>
     */
    public static final int LessOrEqualString_VALUE = 426;
    /**
     * <code>LessOrEqualTime = 427;</code>
     */
    public static final int LessOrEqualTime_VALUE = 427;
    /**
     * <code>LessOrEqualDate = 428;</code>
     */
    public static final int LessOrEqualDate_VALUE = 428;
    /**
     * <code>LessOrEqualJson = 429;</code>
     */
    public static final int LessOrEqualJson_VALUE = 429;
    /**
     * <code>GreaterInt = 430;</code>
     */
    public static final int GreaterInt_VALUE = 430;
    /**
     * <code>GreaterReal = 431;</code>
     */
    public static final int GreaterReal_VALUE = 431;
    /**
     * <code>GreaterDecimal = 432;</code>
     */
    public static final int GreaterDecimal_VALUE = 432;
    /**
     * <code>GreaterString = 433;</code>
     */
    public static final int GreaterString_VALUE = 433;
    /**
     * <code>GreaterTime = 434;</code>
     */
    public static final int GreaterTime_VALUE = 434;
    /**
     * <code>GreaterDate = 435;</code>
     */
    public static final int GreaterDate_VALUE = 435;
    /**
     * <code>GreaterJson = 436;</code>
     */
    public static final int GreaterJson_VALUE = 436;
    /**
     * <code>GreaterOrEqualInt = 437;</code>
     */
    public static final int GreaterOrEqualInt_VALUE = 437;
    /**
     * <code>GreaterOrEqualReal = 438;</code>
     */
    public static final int GreaterOrEqualReal_VALUE = 438;
    /**
     * <code>GreaterOrEqualDecimal = 439;</code>
     */
    public static final int GreaterOrEqualDecimal_VALUE = 439;
    /**
     * <code>GreaterOrEqualString = 440;</code>
     */
    public static final int GreaterOrEqualString_VALUE = 440;
    /**
     * <code>GreaterOrEqualTime = 441;</code>
     */
    public static final int GreaterOrEqualTime_VALUE = 441;
    /**
     * <code>GreaterOrEqualDate = 442;</code>
     */
    public static final int GreaterOrEqualDate_VALUE = 442;
    /**
     * <code>GreaterOrEqualJson = 443;</code>
     */
    public static final int GreaterOrEqualJson_VALUE = 443;
    /**
     * <code>Like = 444;</code>
     */
    public static final int Like_VALUE = 444;
    /**
     * <code>NotLike = 445;</code>
     */
    public static final int NotLike_VALUE = 445;
    /**
     * <code>RegexpLike = 446;</code>
     */
    public static final int RegexpLike_VALUE = 446;
    /**
     * <code>Regexp = 447;</code>
     */
    public static final int Regexp_VALUE = 447;
    /**
     * <code>NotRegexp = 448;</code>
     */
    public static final int NotRegexp_VALUE = 448;
    /**
     * <code>IN = 449;</code>
     */
    public static final int IN_VALUE = 449;
    /**
     * <pre>
     * Arithmetic Operator
     * </pre>
     *
     * <code>Plus = 551;</code>
     */
    public static final int Plus_VALUE = 551;
    /**
     * <code>PlusReal = 552;</code>
     */
    public static final int PlusReal_VALUE = 552;
    /**
     * <code>PlusDecimal = 553;</code>
     */
    public static final int PlusDecimal_VALUE = 553;
    /**
     * <code>PlusInt = 554;</code>
     */
    public static final int PlusInt_VALUE = 554;
    /**
     * <code>Minus = 561;</code>
     */
    public static final int Minus_VALUE = 561;
    /**
     * <code>MinusReal = 562;</code>
     */
    public static final int MinusReal_VALUE = 562;
    /**
     * <code>MinusDecimal = 563;</code>
     */
    public static final int MinusDecimal_VALUE = 563;
    /**
     * <code>MinusInt = 564;</code>
     */
    public static final int MinusInt_VALUE = 564;
    /**
     * <code>Mult = 571;</code>
     */
    public static final int Mult_VALUE = 571;
    /**
     * <code>MultReal = 572;</code>
     */
    public static final int MultReal_VALUE = 572;
    /**
     * <code>MultDecimal = 573;</code>
     */
    public static final int MultDecimal_VALUE = 573;
    /**
     * <code>MultInt = 574;</code>
     */
    public static final int MultInt_VALUE = 574;
    /**
     * <code>MultIntUnsigned = 575;</code>
     */
    public static final int MultIntUnsigned_VALUE = 575;
    /**
     * <code>Div = 581;</code>
     */
    public static final int Div_VALUE = 581;
    /**
     * <code>DivReal = 582;</code>
     */
    public static final int DivReal_VALUE = 582;
    /**
     * <code>DivDecimal = 583;</code>
     */
    public static final int DivDecimal_VALUE = 583;
    /**
     * <code>IntDivInt = 584;</code>
     */
    public static final int IntDivInt_VALUE = 584;
    /**
     * <code>IntDivDecimal = 585;</code>
     */
    public static final int IntDivDecimal_VALUE = 585;
    /**
     * <code>Mod = 591;</code>
     */
    public static final int Mod_VALUE = 591;
    /**
     * <code>ModReal = 592;</code>
     */
    public static final int ModReal_VALUE = 592;
    /**
     * <code>ModDecimal = 593;</code>
     */
    public static final int ModDecimal_VALUE = 593;
    /**
     * <code>ModInt = 594;</code>
     */
    public static final int ModInt_VALUE = 594;
    /**
     * <pre>
     * Mathematical Functions
     * </pre>
     *
     * <code>Abs = 701;</code>
     */
    public static final int Abs_VALUE = 701;
    /**
     * <code>Ceil = 702;</code>
     */
    public static final int Ceil_VALUE = 702;
    /**
     * <code>Floor = 703;</code>
     */
    public static final int Floor_VALUE = 703;
    /**
     * <code>Round = 704;</code>
     */
    public static final int Round_VALUE = 704;
    /**
     * <code>Rand = 705;</code>
     */
    public static final int Rand_VALUE = 705;
    /**
     * <code>Conv = 706;</code>
     */
    public static final int Conv_VALUE = 706;
    /**
     * <code>CRC32 = 707;</code>
     */
    public static final int CRC32_VALUE = 707;
    /**
     * <code>Degrees = 708;</code>
     */
    public static final int Degrees_VALUE = 708;
    /**
     * <code>Exp = 709;</code>
     */
    public static final int Exp_VALUE = 709;
    /**
     * <code>Acos = 710;</code>
     */
    public static final int Acos_VALUE = 710;
    /**
     * <code>Asin = 711;</code>
     */
    public static final int Asin_VALUE = 711;
    /**
     * <code>Atan = 712;</code>
     */
    public static final int Atan_VALUE = 712;
    /**
     * <code>Atan2 = 713;</code>
     */
    public static final int Atan2_VALUE = 713;
    /**
     * <code>Cos = 714;</code>
     */
    public static final int Cos_VALUE = 714;
    /**
     * <code>Cot = 715;</code>
     */
    public static final int Cot_VALUE = 715;
    /**
     * <code>Ln = 716;</code>
     */
    public static final int Ln_VALUE = 716;
    /**
     * <code>Log = 717;</code>
     */
    public static final int Log_VALUE = 717;
    /**
     * <code>Log10 = 718;</code>
     */
    public static final int Log10_VALUE = 718;
    /**
     * <code>Log2 = 719;</code>
     */
    public static final int Log2_VALUE = 719;
    /**
     * <code>PI = 720;</code>
     */
    public static final int PI_VALUE = 720;
    /**
     * <code>Pow = 721;</code>
     */
    public static final int Pow_VALUE = 721;
    /**
     * <code>Radians = 722;</code>
     */
    public static final int Radians_VALUE = 722;
    /**
     * <code>Sign = 723;</code>
     */
    public static final int Sign_VALUE = 723;
    /**
     * <code>Sin = 724;</code>
     */
    public static final int Sin_VALUE = 724;
    /**
     * <code>Sqrt = 725;</code>
     */
    public static final int Sqrt_VALUE = 725;
    /**
     * <code>Tan = 726;</code>
     */
    public static final int Tan_VALUE = 726;
    /**
     * <code>Truncate = 727;</code>
     */
    public static final int Truncate_VALUE = 727;
    /**
     * <pre>
     * control flow functions
     * </pre>
     *
     * <code>CaseWhen = 751;</code>
     */
    public static final int CaseWhen_VALUE = 751;
    /**
     * <code>If = 752;</code>
     */
    public static final int If_VALUE = 752;
    /**
     * <code>IfInt = 753;</code>
     */
    public static final int IfInt_VALUE = 753;
    /**
     * <code>IfReal = 754;</code>
     */
    public static final int IfReal_VALUE = 754;
    /**
     * <code>IfDecimal = 755;</code>
     */
    public static final int IfDecimal_VALUE = 755;
    /**
     * <code>IfString = 756;</code>
     */
    public static final int IfString_VALUE = 756;
    /**
     * <code>IfTime = 757;</code>
     */
    public static final int IfTime_VALUE = 757;
    /**
     * <code>IfDate = 758;</code>
     */
    public static final int IfDate_VALUE = 758;
    /**
     * <code>IfNullJson = 759;</code>
     */
    public static final int IfNullJson_VALUE = 759;
    /**
     * <code>IfJson = 760;</code>
     */
    public static final int IfJson_VALUE = 760;
    /**
     * <code>IfNull = 761;</code>
     */
    public static final int IfNull_VALUE = 761;
    /**
     * <pre>
     * Encryption and Compression Functions
     * </pre>
     *
     * <code>Aes_decrypt = 901;</code>
     */
    public static final int Aes_decrypt_VALUE = 901;
    /**
     * <code>Aes_encrypt = 902;</code>
     */
    public static final int Aes_encrypt_VALUE = 902;
    /**
     * <code>Compress = 903;</code>
     */
    public static final int Compress_VALUE = 903;
    /**
     * <code>Uncompress = 904;</code>
     */
    public static final int Uncompress_VALUE = 904;
    /**
     * <code>Md5 = 905;</code>
     */
    public static final int Md5_VALUE = 905;
    /**
     * <code>Password = 906;</code>
     */
    public static final int Password_VALUE = 906;
    /**
     * <code>SHA1 = 907;</code>
     */
    public static final int SHA1_VALUE = 907;
    /**
     * <code>SHA2 = 908;</code>
     */
    public static final int SHA2_VALUE = 908;
    /**
     * <pre>
     * String Comparison Functions and Operators
     * </pre>
     *
     * <code>Ascii = 1201;</code>
     */
    public static final int Ascii_VALUE = 1201;
    /**
     * <code>Bin = 1202;</code>
     */
    public static final int Bin_VALUE = 1202;
    /**
     * <code>Bit_length = 1203;</code>
     */
    public static final int Bit_length_VALUE = 1203;
    /**
     * <code>Char = 1204;</code>
     */
    public static final int Char_VALUE = 1204;
    /**
     * <code>Char_length = 1205;</code>
     */
    public static final int Char_length_VALUE = 1205;
    /**
     * <code>Character_length = 1206;</code>
     */
    public static final int Character_length_VALUE = 1206;
    /**
     * <code>Concat = 1207;</code>
     */
    public static final int Concat_VALUE = 1207;
    /**
     * <code>Concat_ws = 1208;</code>
     */
    public static final int Concat_ws_VALUE = 1208;
    /**
     * <code>Elt = 1209;</code>
     */
    public static final int Elt_VALUE = 1209;
    /**
     * <code>Export_set = 1210;</code>
     */
    public static final int Export_set_VALUE = 1210;
    /**
     * <code>Field = 1211;</code>
     */
    public static final int Field_VALUE = 1211;
    /**
     * <code>Find_in_set = 1212;</code>
     */
    public static final int Find_in_set_VALUE = 1212;
    /**
     * <code>Format = 1213;</code>
     */
    public static final int Format_VALUE = 1213;
    /**
     * <code>From_base64 = 1214;</code>
     */
    public static final int From_base64_VALUE = 1214;
    /**
     * <code>Hex = 1215;</code>
     */
    public static final int Hex_VALUE = 1215;
    /**
     * <code>Insert = 1216;</code>
     */
    public static final int Insert_VALUE = 1216;
    /**
     * <code>Instr = 1217;</code>
     */
    public static final int Instr_VALUE = 1217;
    /**
     * <code>Lcase = 1218;</code>
     */
    public static final int Lcase_VALUE = 1218;
    /**
     * <code>Left = 1219;</code>
     */
    public static final int Left_VALUE = 1219;
    /**
     * <code>Length = 1220;</code>
     */
    public static final int Length_VALUE = 1220;
    /**
     * <code>Str_Like = 1221;</code>
     */
    public static final int Str_Like_VALUE = 1221;
    /**
     * <code>Load_file = 1222;</code>
     */
    public static final int Load_file_VALUE = 1222;
    /**
     * <code>Locate = 1223;</code>
     */
    public static final int Locate_VALUE = 1223;
    /**
     * <code>Lower = 1224;</code>
     */
    public static final int Lower_VALUE = 1224;
    /**
     * <code>Lpad = 1225;</code>
     */
    public static final int Lpad_VALUE = 1225;
    /**
     * <code>Ltrim = 1226;</code>
     */
    public static final int Ltrim_VALUE = 1226;
    /**
     * <code>Make_set = 1227;</code>
     */
    public static final int Make_set_VALUE = 1227;
    /**
     * <code>Match = 1228;</code>
     */
    public static final int Match_VALUE = 1228;
    /**
     * <code>Mid = 1229;</code>
     */
    public static final int Mid_VALUE = 1229;
    /**
     * <code>Str_Not_like = 1230;</code>
     */
    public static final int Str_Not_like_VALUE = 1230;
    /**
     * <code>Str_Not_regexp = 1231;</code>
     */
    public static final int Str_Not_regexp_VALUE = 1231;
    /**
     * <code>Oct = 1232;</code>
     */
    public static final int Oct_VALUE = 1232;
    /**
     * <code>Octet_length = 1233;</code>
     */
    public static final int Octet_length_VALUE = 1233;
    /**
     * <code>Ord = 1234;</code>
     */
    public static final int Ord_VALUE = 1234;
    /**
     * <code>Position = 1235;</code>
     */
    public static final int Position_VALUE = 1235;
    /**
     * <code>Quote = 1236;</code>
     */
    public static final int Quote_VALUE = 1236;
    /**
     * <code>StrRegexp = 1237;</code>
     */
    public static final int StrRegexp_VALUE = 1237;
    /**
     * <code>Repeat = 1238;</code>
     */
    public static final int Repeat_VALUE = 1238;
    /**
     * <code>Replace = 1239;</code>
     */
    public static final int Replace_VALUE = 1239;
    /**
     * <code>Reverse = 1240;</code>
     */
    public static final int Reverse_VALUE = 1240;
    /**
     * <code>Right = 1241;</code>
     */
    public static final int Right_VALUE = 1241;
    /**
     * <code>Rlike = 1242;</code>
     */
    public static final int Rlike_VALUE = 1242;
    /**
     * <code>Rpad = 1243;</code>
     */
    public static final int Rpad_VALUE = 1243;
    /**
     * <code>Rtrim = 1244;</code>
     */
    public static final int Rtrim_VALUE = 1244;
    /**
     * <code>Soundex = 1245;</code>
     */
    public static final int Soundex_VALUE = 1245;
    /**
     * <code>SoundsLike = 1246;</code>
     */
    public static final int SoundsLike_VALUE = 1246;
    /**
     * <code>Space = 1247;</code>
     */
    public static final int Space_VALUE = 1247;
    /**
     * <code>Strcmp = 1248;</code>
     */
    public static final int Strcmp_VALUE = 1248;
    /**
     * <code>Substr = 1249;</code>
     */
    public static final int Substr_VALUE = 1249;
    /**
     * <code>Substring = 1250;</code>
     */
    public static final int Substring_VALUE = 1250;
    /**
     * <code>SubstringIndex = 1251;</code>
     */
    public static final int SubstringIndex_VALUE = 1251;
    /**
     * <code>ToBase64 = 1252;</code>
     */
    public static final int ToBase64_VALUE = 1252;
    /**
     * <code>Trim = 1253;</code>
     */
    public static final int Trim_VALUE = 1253;
    /**
     * <code>Ucase = 1254;</code>
     */
    public static final int Ucase_VALUE = 1254;
    /**
     * <code>Unhex = 1255;</code>
     */
    public static final int Unhex_VALUE = 1255;
    /**
     * <code>Upper = 1256;</code>
     */
    public static final int Upper_VALUE = 1256;
    /**
     * <code>WeightString = 1257;</code>
     */
    public static final int WeightString_VALUE = 1257;
    /**
     * <pre>
     * Date and Time Functions
     * </pre>
     *
     * <code>Adddate = 2001;</code>
     */
    public static final int Adddate_VALUE = 2001;
    /**
     * <code>Addtime = 2002;</code>
     */
    public static final int Addtime_VALUE = 2002;
    /**
     * <code>Convert_tz = 2003;</code>
     */
    public static final int Convert_tz_VALUE = 2003;
    /**
     * <code>Curdate = 2004;</code>
     */
    public static final int Curdate_VALUE = 2004;
    /**
     * <code>CurrentDate = 2005;</code>
     */
    public static final int CurrentDate_VALUE = 2005;
    /**
     * <code>CurrentTime = 2006;</code>
     */
    public static final int CurrentTime_VALUE = 2006;
    /**
     * <code>CurrentTimestamp = 2007;</code>
     */
    public static final int CurrentTimestamp_VALUE = 2007;
    /**
     * <code>Curtime = 2008;</code>
     */
    public static final int Curtime_VALUE = 2008;
    /**
     * <code>Date = 2009;</code>
     */
    public static final int Date_VALUE = 2009;
    /**
     * <code>Date_add = 2010;</code>
     */
    public static final int Date_add_VALUE = 2010;
    /**
     * <code>Date_format = 2011;</code>
     */
    public static final int Date_format_VALUE = 2011;
    /**
     * <code>Date_sub = 2012;</code>
     */
    public static final int Date_sub_VALUE = 2012;
    /**
     * <code>Datediff = 2013;</code>
     */
    public static final int Datediff_VALUE = 2013;
    /**
     * <code>Day = 2014;</code>
     */
    public static final int Day_VALUE = 2014;
    /**
     * <code>Dayname = 2015;</code>
     */
    public static final int Dayname_VALUE = 2015;
    /**
     * <code>Dayofmonth = 2016;</code>
     */
    public static final int Dayofmonth_VALUE = 2016;
    /**
     * <code>Dayofweek = 2017;</code>
     */
    public static final int Dayofweek_VALUE = 2017;
    /**
     * <code>Dayofyear = 2018;</code>
     */
    public static final int Dayofyear_VALUE = 2018;
    /**
     * <code>Extract = 2019;</code>
     */
    public static final int Extract_VALUE = 2019;
    /**
     * <code>From_days = 2020;</code>
     */
    public static final int From_days_VALUE = 2020;
    /**
     * <code>From_unixtime = 2021;</code>
     */
    public static final int From_unixtime_VALUE = 2021;
    /**
     * <code>Get_format = 2022;</code>
     */
    public static final int Get_format_VALUE = 2022;
    /**
     * <code>Hour = 2023;</code>
     */
    public static final int Hour_VALUE = 2023;
    /**
     * <code>Last_day = 2024;</code>
     */
    public static final int Last_day_VALUE = 2024;
    /**
     * <code>Localtime = 2025;</code>
     */
    public static final int Localtime_VALUE = 2025;
    /**
     * <code>Localtimestamp = 2026;</code>
     */
    public static final int Localtimestamp_VALUE = 2026;
    /**
     * <code>Makedate = 2027;</code>
     */
    public static final int Makedate_VALUE = 2027;
    /**
     * <code>Maketime = 2028;</code>
     */
    public static final int Maketime_VALUE = 2028;
    /**
     * <code>Microsecond = 2029;</code>
     */
    public static final int Microsecond_VALUE = 2029;
    /**
     * <code>Minute = 2030;</code>
     */
    public static final int Minute_VALUE = 2030;
    /**
     * <code>Month = 2031;</code>
     */
    public static final int Month_VALUE = 2031;
    /**
     * <code>Monthname = 2032;</code>
     */
    public static final int Monthname_VALUE = 2032;
    /**
     * <code>Now = 2033;</code>
     */
    public static final int Now_VALUE = 2033;
    /**
     * <code>Period_add = 2034;</code>
     */
    public static final int Period_add_VALUE = 2034;
    /**
     * <code>Period_diff = 2035;</code>
     */
    public static final int Period_diff_VALUE = 2035;
    /**
     * <code>Quarter = 2036;</code>
     */
    public static final int Quarter_VALUE = 2036;
    /**
     * <code>Sec_to_time = 2037;</code>
     */
    public static final int Sec_to_time_VALUE = 2037;
    /**
     * <code>Second = 2038;</code>
     */
    public static final int Second_VALUE = 2038;
    /**
     * <code>Str_to_date = 2039;</code>
     */
    public static final int Str_to_date_VALUE = 2039;
    /**
     * <code>Subdate = 2040;</code>
     */
    public static final int Subdate_VALUE = 2040;
    /**
     * <code>Subtime = 2041;</code>
     */
    public static final int Subtime_VALUE = 2041;
    /**
     * <code>Sysdate = 2042;</code>
     */
    public static final int Sysdate_VALUE = 2042;
    /**
     * <code>Time = 2043;</code>
     */
    public static final int Time_VALUE = 2043;
    /**
     * <code>Time_format = 2044;</code>
     */
    public static final int Time_format_VALUE = 2044;
    /**
     * <code>Time_to_sec = 2045;</code>
     */
    public static final int Time_to_sec_VALUE = 2045;
    /**
     * <code>Timediff = 2046;</code>
     */
    public static final int Timediff_VALUE = 2046;
    /**
     * <code>Timestamp = 2047;</code>
     */
    public static final int Timestamp_VALUE = 2047;
    /**
     * <code>Timestampadd = 2048;</code>
     */
    public static final int Timestampadd_VALUE = 2048;
    /**
     * <code>Timestampdiff = 2049;</code>
     */
    public static final int Timestampdiff_VALUE = 2049;
    /**
     * <code>To_days = 2050;</code>
     */
    public static final int To_days_VALUE = 2050;
    /**
     * <code>To_seconds = 2051;</code>
     */
    public static final int To_seconds_VALUE = 2051;
    /**
     * <code>Unix_timestamp = 2052;</code>
     */
    public static final int Unix_timestamp_VALUE = 2052;
    /**
     * <code>Utc_date = 2053;</code>
     */
    public static final int Utc_date_VALUE = 2053;
    /**
     * <code>Utc_time = 2054;</code>
     */
    public static final int Utc_time_VALUE = 2054;
    /**
     * <code>Utc_timestamp = 2055;</code>
     */
    public static final int Utc_timestamp_VALUE = 2055;
    /**
     * <code>Week = 2056;</code>
     */
    public static final int Week_VALUE = 2056;
    /**
     * <code>Weekday = 2057;</code>
     */
    public static final int Weekday_VALUE = 2057;
    /**
     * <code>Weekofyear = 2058;</code>
     */
    public static final int Weekofyear_VALUE = 2058;
    /**
     * <code>Year = 2059;</code>
     */
    public static final int Year_VALUE = 2059;
    /**
     * <code>Yearweek = 2060;</code>
     */
    public static final int Yearweek_VALUE = 2060;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ExprType valueOf(int value) {
      return forNumber(value);
    }

    public static ExprType forNumber(int value) {
      switch (value) {
        case 0: return Invalid_Expr;
        case 1: return Column;
        case 2: return Const_Int;
        case 3: return Const_UInt;
        case 4: return Const_Double;
        case 5: return Const_Bytes;
        case 6: return Const_Decimal;
        case 7: return Const_Date;
        case 8: return Const_Time;
        case 20: return Equal;
        case 21: return NotEqual;
        case 22: return Less;
        case 23: return LessOrEqual;
        case 24: return Larger;
        case 25: return LargerOrEqual;
        case 151: return Avg;
        case 152: return Count;
        case 153: return Max;
        case 154: return Min;
        case 155: return Sum;
        case 156: return Std;
        case 157: return Distinct;
        case 201: return LogicAnd;
        case 202: return LogicOr;
        case 203: return LogicNot;
        case 204: return LogicXor;
        case 205: return UnaryNot;
        case 206: return UnaryMinus;
        case 207: return IsNull;
        case 208: return DecimalIsNull;
        case 209: return DateIsNull;
        case 210: return RealIsNull;
        case 211: return StringIsNull;
        case 212: return TimeIsNull;
        case 213: return IntIsNull;
        case 214: return JsonIsNull;
        case 215: return IsNotNull;
        case 216: return IsTrue;
        case 217: return IsFalse;
        case 218: return LeftShift;
        case 219: return RightShift;
        case 301: return CastIntToInt;
        case 302: return CastIntToReal;
        case 303: return CastIntToString;
        case 304: return CastIntToDecimal;
        case 305: return CastIntToTime;
        case 306: return CastIntToDate;
        case 307: return CastIntToJson;
        case 308: return CastRealToInt;
        case 309: return CastRealToReal;
        case 310: return CastRealToString;
        case 311: return CastRealToDecimal;
        case 312: return CastRealToTime;
        case 313: return CastRealToDate;
        case 314: return CastRealToJson;
        case 315: return CastDecimalToInt;
        case 316: return CastDecimalToReal;
        case 317: return CastDecimalToString;
        case 318: return CastDecimalToDecimal;
        case 319: return CastDecimalToTime;
        case 320: return CastDecimalToDate;
        case 321: return CastDecimalToJson;
        case 322: return CastStringToInt;
        case 323: return CastStringToReal;
        case 324: return CastStringToString;
        case 325: return CastStringToDecimal;
        case 326: return CastStringToTime;
        case 327: return CastStringToDate;
        case 328: return CastStringToJson;
        case 329: return CastTimeToInt;
        case 330: return CastTimeToReal;
        case 331: return CastTimeToString;
        case 332: return CastTimeToDecimal;
        case 333: return CastTimeToTime;
        case 334: return CastTimeToDate;
        case 335: return CastTimeToJson;
        case 336: return CastDateToInt;
        case 337: return CastDateToReal;
        case 338: return CastDateToString;
        case 339: return CastDateToDecimal;
        case 340: return CastDateToTime;
        case 341: return CastDateToDate;
        case 342: return CastDateToJson;
        case 343: return CastJsonToInt;
        case 344: return CastJsonToReal;
        case 345: return CastJsonToString;
        case 346: return CastJsonToDecimal;
        case 347: return CastJsonToTime;
        case 348: return CastJsonToDate;
        case 349: return CastJsonToJson;
        case 401: return Coalesce;
        case 402: return EqualInt;
        case 403: return EqualReal;
        case 404: return EqualString;
        case 405: return EqualDecimal;
        case 406: return EqualTime;
        case 407: return EqualDate;
        case 408: return EqualJson;
        case 409: return NotEqualInt;
        case 410: return NotEqualReal;
        case 411: return NotEqualDecimal;
        case 412: return NotEqualString;
        case 413: return NotEqualTime;
        case 414: return NotEqualDate;
        case 415: return NotEqualJson;
        case 416: return LessInt;
        case 417: return LessReal;
        case 418: return LessDecimal;
        case 419: return LessString;
        case 420: return LessTime;
        case 421: return LessDate;
        case 422: return LessJson;
        case 423: return LessOrEqualInt;
        case 424: return LessOrEqualReal;
        case 425: return LessOrEqualDecimal;
        case 426: return LessOrEqualString;
        case 427: return LessOrEqualTime;
        case 428: return LessOrEqualDate;
        case 429: return LessOrEqualJson;
        case 430: return GreaterInt;
        case 431: return GreaterReal;
        case 432: return GreaterDecimal;
        case 433: return GreaterString;
        case 434: return GreaterTime;
        case 435: return GreaterDate;
        case 436: return GreaterJson;
        case 437: return GreaterOrEqualInt;
        case 438: return GreaterOrEqualReal;
        case 439: return GreaterOrEqualDecimal;
        case 440: return GreaterOrEqualString;
        case 441: return GreaterOrEqualTime;
        case 442: return GreaterOrEqualDate;
        case 443: return GreaterOrEqualJson;
        case 444: return Like;
        case 445: return NotLike;
        case 446: return RegexpLike;
        case 447: return Regexp;
        case 448: return NotRegexp;
        case 449: return IN;
        case 551: return Plus;
        case 552: return PlusReal;
        case 553: return PlusDecimal;
        case 554: return PlusInt;
        case 561: return Minus;
        case 562: return MinusReal;
        case 563: return MinusDecimal;
        case 564: return MinusInt;
        case 571: return Mult;
        case 572: return MultReal;
        case 573: return MultDecimal;
        case 574: return MultInt;
        case 575: return MultIntUnsigned;
        case 581: return Div;
        case 582: return DivReal;
        case 583: return DivDecimal;
        case 584: return IntDivInt;
        case 585: return IntDivDecimal;
        case 591: return Mod;
        case 592: return ModReal;
        case 593: return ModDecimal;
        case 594: return ModInt;
        case 701: return Abs;
        case 702: return Ceil;
        case 703: return Floor;
        case 704: return Round;
        case 705: return Rand;
        case 706: return Conv;
        case 707: return CRC32;
        case 708: return Degrees;
        case 709: return Exp;
        case 710: return Acos;
        case 711: return Asin;
        case 712: return Atan;
        case 713: return Atan2;
        case 714: return Cos;
        case 715: return Cot;
        case 716: return Ln;
        case 717: return Log;
        case 718: return Log10;
        case 719: return Log2;
        case 720: return PI;
        case 721: return Pow;
        case 722: return Radians;
        case 723: return Sign;
        case 724: return Sin;
        case 725: return Sqrt;
        case 726: return Tan;
        case 727: return Truncate;
        case 751: return CaseWhen;
        case 752: return If;
        case 753: return IfInt;
        case 754: return IfReal;
        case 755: return IfDecimal;
        case 756: return IfString;
        case 757: return IfTime;
        case 758: return IfDate;
        case 759: return IfNullJson;
        case 760: return IfJson;
        case 761: return IfNull;
        case 901: return Aes_decrypt;
        case 902: return Aes_encrypt;
        case 903: return Compress;
        case 904: return Uncompress;
        case 905: return Md5;
        case 906: return Password;
        case 907: return SHA1;
        case 908: return SHA2;
        case 1201: return Ascii;
        case 1202: return Bin;
        case 1203: return Bit_length;
        case 1204: return Char;
        case 1205: return Char_length;
        case 1206: return Character_length;
        case 1207: return Concat;
        case 1208: return Concat_ws;
        case 1209: return Elt;
        case 1210: return Export_set;
        case 1211: return Field;
        case 1212: return Find_in_set;
        case 1213: return Format;
        case 1214: return From_base64;
        case 1215: return Hex;
        case 1216: return Insert;
        case 1217: return Instr;
        case 1218: return Lcase;
        case 1219: return Left;
        case 1220: return Length;
        case 1221: return Str_Like;
        case 1222: return Load_file;
        case 1223: return Locate;
        case 1224: return Lower;
        case 1225: return Lpad;
        case 1226: return Ltrim;
        case 1227: return Make_set;
        case 1228: return Match;
        case 1229: return Mid;
        case 1230: return Str_Not_like;
        case 1231: return Str_Not_regexp;
        case 1232: return Oct;
        case 1233: return Octet_length;
        case 1234: return Ord;
        case 1235: return Position;
        case 1236: return Quote;
        case 1237: return StrRegexp;
        case 1238: return Repeat;
        case 1239: return Replace;
        case 1240: return Reverse;
        case 1241: return Right;
        case 1242: return Rlike;
        case 1243: return Rpad;
        case 1244: return Rtrim;
        case 1245: return Soundex;
        case 1246: return SoundsLike;
        case 1247: return Space;
        case 1248: return Strcmp;
        case 1249: return Substr;
        case 1250: return Substring;
        case 1251: return SubstringIndex;
        case 1252: return ToBase64;
        case 1253: return Trim;
        case 1254: return Ucase;
        case 1255: return Unhex;
        case 1256: return Upper;
        case 1257: return WeightString;
        case 2001: return Adddate;
        case 2002: return Addtime;
        case 2003: return Convert_tz;
        case 2004: return Curdate;
        case 2005: return CurrentDate;
        case 2006: return CurrentTime;
        case 2007: return CurrentTimestamp;
        case 2008: return Curtime;
        case 2009: return Date;
        case 2010: return Date_add;
        case 2011: return Date_format;
        case 2012: return Date_sub;
        case 2013: return Datediff;
        case 2014: return Day;
        case 2015: return Dayname;
        case 2016: return Dayofmonth;
        case 2017: return Dayofweek;
        case 2018: return Dayofyear;
        case 2019: return Extract;
        case 2020: return From_days;
        case 2021: return From_unixtime;
        case 2022: return Get_format;
        case 2023: return Hour;
        case 2024: return Last_day;
        case 2025: return Localtime;
        case 2026: return Localtimestamp;
        case 2027: return Makedate;
        case 2028: return Maketime;
        case 2029: return Microsecond;
        case 2030: return Minute;
        case 2031: return Month;
        case 2032: return Monthname;
        case 2033: return Now;
        case 2034: return Period_add;
        case 2035: return Period_diff;
        case 2036: return Quarter;
        case 2037: return Sec_to_time;
        case 2038: return Second;
        case 2039: return Str_to_date;
        case 2040: return Subdate;
        case 2041: return Subtime;
        case 2042: return Sysdate;
        case 2043: return Time;
        case 2044: return Time_format;
        case 2045: return Time_to_sec;
        case 2046: return Timediff;
        case 2047: return Timestamp;
        case 2048: return Timestampadd;
        case 2049: return Timestampdiff;
        case 2050: return To_days;
        case 2051: return To_seconds;
        case 2052: return Unix_timestamp;
        case 2053: return Utc_date;
        case 2054: return Utc_time;
        case 2055: return Utc_timestamp;
        case 2056: return Week;
        case 2057: return Weekday;
        case 2058: return Weekofyear;
        case 2059: return Year;
        case 2060: return Yearweek;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ExprType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ExprType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ExprType>() {
            public ExprType findValueByNumber(int number) {
              return ExprType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.jimdb.pb.Exprpb.getDescriptor().getEnumTypes().get(0);
    }

    private static final ExprType[] VALUES = values();

    public static ExprType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ExprType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:dspb.ExprType)
  }

  public interface ColumnInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dspb.ColumnInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint32 id = 1;</code>
     */
    int getId();

    /**
     * <code>.basepb.DataType typ = 2;</code>
     */
    int getTypValue();
    /**
     * <code>.basepb.DataType typ = 2;</code>
     */
    io.jimdb.pb.Basepb.DataType getTyp();

    /**
     * <code>bool unsigned = 3;</code>
     */
    boolean getUnsigned();

    /**
     * <code>bytes reorg_value = 4;</code>
     */
    com.google.protobuf.ByteString getReorgValue();
  }
  /**
   * Protobuf type {@code dspb.ColumnInfo}
   */
  public  static final class ColumnInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dspb.ColumnInfo)
      ColumnInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ColumnInfo.newBuilder() to construct.
    private ColumnInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ColumnInfo() {
      id_ = 0;
      typ_ = 0;
      unsigned_ = false;
      reorgValue_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ColumnInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              id_ = input.readUInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              typ_ = rawValue;
              break;
            }
            case 24: {

              unsigned_ = input.readBool();
              break;
            }
            case 34: {

              reorgValue_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jimdb.pb.Exprpb.internal_static_dspb_ColumnInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jimdb.pb.Exprpb.internal_static_dspb_ColumnInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jimdb.pb.Exprpb.ColumnInfo.class, io.jimdb.pb.Exprpb.ColumnInfo.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>uint32 id = 1;</code>
     */
    public int getId() {
      return id_;
    }

    public static final int TYP_FIELD_NUMBER = 2;
    private int typ_;
    /**
     * <code>.basepb.DataType typ = 2;</code>
     */
    public int getTypValue() {
      return typ_;
    }
    /**
     * <code>.basepb.DataType typ = 2;</code>
     */
    public io.jimdb.pb.Basepb.DataType getTyp() {
      @SuppressWarnings("deprecation")
      io.jimdb.pb.Basepb.DataType result = io.jimdb.pb.Basepb.DataType.valueOf(typ_);
      return result == null ? io.jimdb.pb.Basepb.DataType.UNRECOGNIZED : result;
    }

    public static final int UNSIGNED_FIELD_NUMBER = 3;
    private boolean unsigned_;
    /**
     * <code>bool unsigned = 3;</code>
     */
    public boolean getUnsigned() {
      return unsigned_;
    }

    public static final int REORG_VALUE_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString reorgValue_;
    /**
     * <code>bytes reorg_value = 4;</code>
     */
    public com.google.protobuf.ByteString getReorgValue() {
      return reorgValue_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != 0) {
        output.writeUInt32(1, id_);
      }
      if (typ_ != io.jimdb.pb.Basepb.DataType.Invalid.getNumber()) {
        output.writeEnum(2, typ_);
      }
      if (unsigned_ != false) {
        output.writeBool(3, unsigned_);
      }
      if (!reorgValue_.isEmpty()) {
        output.writeBytes(4, reorgValue_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (typ_ != io.jimdb.pb.Basepb.DataType.Invalid.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, typ_);
      }
      if (unsigned_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, unsigned_);
      }
      if (!reorgValue_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, reorgValue_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jimdb.pb.Exprpb.ColumnInfo)) {
        return super.equals(obj);
      }
      io.jimdb.pb.Exprpb.ColumnInfo other = (io.jimdb.pb.Exprpb.ColumnInfo) obj;

      boolean result = true;
      result = result && (getId()
          == other.getId());
      result = result && typ_ == other.typ_;
      result = result && (getUnsigned()
          == other.getUnsigned());
      result = result && getReorgValue()
          .equals(other.getReorgValue());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId();
      hash = (37 * hash) + TYP_FIELD_NUMBER;
      hash = (53 * hash) + typ_;
      hash = (37 * hash) + UNSIGNED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUnsigned());
      hash = (37 * hash) + REORG_VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getReorgValue().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jimdb.pb.Exprpb.ColumnInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jimdb.pb.Exprpb.ColumnInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jimdb.pb.Exprpb.ColumnInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jimdb.pb.Exprpb.ColumnInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jimdb.pb.Exprpb.ColumnInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jimdb.pb.Exprpb.ColumnInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jimdb.pb.Exprpb.ColumnInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jimdb.pb.Exprpb.ColumnInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jimdb.pb.Exprpb.ColumnInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jimdb.pb.Exprpb.ColumnInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jimdb.pb.Exprpb.ColumnInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jimdb.pb.Exprpb.ColumnInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jimdb.pb.Exprpb.ColumnInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dspb.ColumnInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dspb.ColumnInfo)
        io.jimdb.pb.Exprpb.ColumnInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jimdb.pb.Exprpb.internal_static_dspb_ColumnInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jimdb.pb.Exprpb.internal_static_dspb_ColumnInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jimdb.pb.Exprpb.ColumnInfo.class, io.jimdb.pb.Exprpb.ColumnInfo.Builder.class);
      }

      // Construct using io.jimdb.pb.Exprpb.ColumnInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        id_ = 0;

        typ_ = 0;

        unsigned_ = false;

        reorgValue_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jimdb.pb.Exprpb.internal_static_dspb_ColumnInfo_descriptor;
      }

      @java.lang.Override
      public io.jimdb.pb.Exprpb.ColumnInfo getDefaultInstanceForType() {
        return io.jimdb.pb.Exprpb.ColumnInfo.getDefaultInstance();
      }

      @java.lang.Override
      public io.jimdb.pb.Exprpb.ColumnInfo build() {
        io.jimdb.pb.Exprpb.ColumnInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jimdb.pb.Exprpb.ColumnInfo buildPartial() {
        io.jimdb.pb.Exprpb.ColumnInfo result = new io.jimdb.pb.Exprpb.ColumnInfo(this);
        result.id_ = id_;
        result.typ_ = typ_;
        result.unsigned_ = unsigned_;
        result.reorgValue_ = reorgValue_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jimdb.pb.Exprpb.ColumnInfo) {
          return mergeFrom((io.jimdb.pb.Exprpb.ColumnInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jimdb.pb.Exprpb.ColumnInfo other) {
        if (other == io.jimdb.pb.Exprpb.ColumnInfo.getDefaultInstance()) return this;
        if (other.getId() != 0) {
          setId(other.getId());
        }
        if (other.typ_ != 0) {
          setTypValue(other.getTypValue());
        }
        if (other.getUnsigned() != false) {
          setUnsigned(other.getUnsigned());
        }
        if (other.getReorgValue() != com.google.protobuf.ByteString.EMPTY) {
          setReorgValue(other.getReorgValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jimdb.pb.Exprpb.ColumnInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jimdb.pb.Exprpb.ColumnInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int id_ ;
      /**
       * <code>uint32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>uint32 id = 1;</code>
       */
      public Builder setId(int value) {
        
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 id = 1;</code>
       */
      public Builder clearId() {
        
        id_ = 0;
        onChanged();
        return this;
      }

      private int typ_ = 0;
      /**
       * <code>.basepb.DataType typ = 2;</code>
       */
      public int getTypValue() {
        return typ_;
      }
      /**
       * <code>.basepb.DataType typ = 2;</code>
       */
      public Builder setTypValue(int value) {
        typ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.basepb.DataType typ = 2;</code>
       */
      public io.jimdb.pb.Basepb.DataType getTyp() {
        @SuppressWarnings("deprecation")
        io.jimdb.pb.Basepb.DataType result = io.jimdb.pb.Basepb.DataType.valueOf(typ_);
        return result == null ? io.jimdb.pb.Basepb.DataType.UNRECOGNIZED : result;
      }
      /**
       * <code>.basepb.DataType typ = 2;</code>
       */
      public Builder setTyp(io.jimdb.pb.Basepb.DataType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        typ_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.basepb.DataType typ = 2;</code>
       */
      public Builder clearTyp() {
        
        typ_ = 0;
        onChanged();
        return this;
      }

      private boolean unsigned_ ;
      /**
       * <code>bool unsigned = 3;</code>
       */
      public boolean getUnsigned() {
        return unsigned_;
      }
      /**
       * <code>bool unsigned = 3;</code>
       */
      public Builder setUnsigned(boolean value) {
        
        unsigned_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool unsigned = 3;</code>
       */
      public Builder clearUnsigned() {
        
        unsigned_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString reorgValue_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes reorg_value = 4;</code>
       */
      public com.google.protobuf.ByteString getReorgValue() {
        return reorgValue_;
      }
      /**
       * <code>bytes reorg_value = 4;</code>
       */
      public Builder setReorgValue(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        reorgValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes reorg_value = 4;</code>
       */
      public Builder clearReorgValue() {
        
        reorgValue_ = getDefaultInstance().getReorgValue();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dspb.ColumnInfo)
    }

    // @@protoc_insertion_point(class_scope:dspb.ColumnInfo)
    private static final io.jimdb.pb.Exprpb.ColumnInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jimdb.pb.Exprpb.ColumnInfo();
    }

    public static io.jimdb.pb.Exprpb.ColumnInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ColumnInfo>
        PARSER = new com.google.protobuf.AbstractParser<ColumnInfo>() {
      @java.lang.Override
      public ColumnInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ColumnInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ColumnInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ColumnInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jimdb.pb.Exprpb.ColumnInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExprOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dspb.Expr)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * uint32
     * </pre>
     *
     * <code>.dspb.ExprType expr_type = 1;</code>
     */
    int getExprTypeValue();
    /**
     * <pre>
     * uint32
     * </pre>
     *
     * <code>.dspb.ExprType expr_type = 1;</code>
     */
    io.jimdb.pb.Exprpb.ExprType getExprType();

    /**
     * <pre>
     * left in optimization
     * </pre>
     *
     * <code>.dspb.ColumnInfo column = 2;</code>
     */
    boolean hasColumn();
    /**
     * <pre>
     * left in optimization
     * </pre>
     *
     * <code>.dspb.ColumnInfo column = 2;</code>
     */
    io.jimdb.pb.Exprpb.ColumnInfo getColumn();
    /**
     * <pre>
     * left in optimization
     * </pre>
     *
     * <code>.dspb.ColumnInfo column = 2;</code>
     */
    io.jimdb.pb.Exprpb.ColumnInfoOrBuilder getColumnOrBuilder();

    /**
     * <pre>
     * maybe left or right, but right in optimization
     * </pre>
     *
     * <code>bytes value = 3;</code>
     */
    com.google.protobuf.ByteString getValue();

    /**
     * <pre>
     * always 2 expr left and right, but LogicNot
     * </pre>
     *
     * <code>repeated .dspb.Expr child = 4;</code>
     */
    java.util.List<io.jimdb.pb.Exprpb.Expr>
        getChildList();
    /**
     * <pre>
     * always 2 expr left and right, but LogicNot
     * </pre>
     *
     * <code>repeated .dspb.Expr child = 4;</code>
     */
    io.jimdb.pb.Exprpb.Expr getChild(int index);
    /**
     * <pre>
     * always 2 expr left and right, but LogicNot
     * </pre>
     *
     * <code>repeated .dspb.Expr child = 4;</code>
     */
    int getChildCount();
    /**
     * <pre>
     * always 2 expr left and right, but LogicNot
     * </pre>
     *
     * <code>repeated .dspb.Expr child = 4;</code>
     */
    java.util.List<? extends io.jimdb.pb.Exprpb.ExprOrBuilder>
        getChildOrBuilderList();
    /**
     * <pre>
     * always 2 expr left and right, but LogicNot
     * </pre>
     *
     * <code>repeated .dspb.Expr child = 4;</code>
     */
    io.jimdb.pb.Exprpb.ExprOrBuilder getChildOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dspb.Expr}
   */
  public  static final class Expr extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dspb.Expr)
      ExprOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Expr.newBuilder() to construct.
    private Expr(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Expr() {
      exprType_ = 0;
      value_ = com.google.protobuf.ByteString.EMPTY;
      child_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Expr(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              exprType_ = rawValue;
              break;
            }
            case 18: {
              io.jimdb.pb.Exprpb.ColumnInfo.Builder subBuilder = null;
              if (column_ != null) {
                subBuilder = column_.toBuilder();
              }
              column_ = input.readMessage(io.jimdb.pb.Exprpb.ColumnInfo.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(column_);
                column_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {

              value_ = input.readBytes();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                child_ = new java.util.ArrayList<io.jimdb.pb.Exprpb.Expr>();
                mutable_bitField0_ |= 0x00000008;
              }
              child_.add(
                  input.readMessage(io.jimdb.pb.Exprpb.Expr.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          child_ = java.util.Collections.unmodifiableList(child_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jimdb.pb.Exprpb.internal_static_dspb_Expr_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jimdb.pb.Exprpb.internal_static_dspb_Expr_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jimdb.pb.Exprpb.Expr.class, io.jimdb.pb.Exprpb.Expr.Builder.class);
    }

    private int bitField0_;
    public static final int EXPR_TYPE_FIELD_NUMBER = 1;
    private int exprType_;
    /**
     * <pre>
     * uint32
     * </pre>
     *
     * <code>.dspb.ExprType expr_type = 1;</code>
     */
    public int getExprTypeValue() {
      return exprType_;
    }
    /**
     * <pre>
     * uint32
     * </pre>
     *
     * <code>.dspb.ExprType expr_type = 1;</code>
     */
    public io.jimdb.pb.Exprpb.ExprType getExprType() {
      @SuppressWarnings("deprecation")
      io.jimdb.pb.Exprpb.ExprType result = io.jimdb.pb.Exprpb.ExprType.valueOf(exprType_);
      return result == null ? io.jimdb.pb.Exprpb.ExprType.UNRECOGNIZED : result;
    }

    public static final int COLUMN_FIELD_NUMBER = 2;
    private io.jimdb.pb.Exprpb.ColumnInfo column_;
    /**
     * <pre>
     * left in optimization
     * </pre>
     *
     * <code>.dspb.ColumnInfo column = 2;</code>
     */
    public boolean hasColumn() {
      return column_ != null;
    }
    /**
     * <pre>
     * left in optimization
     * </pre>
     *
     * <code>.dspb.ColumnInfo column = 2;</code>
     */
    public io.jimdb.pb.Exprpb.ColumnInfo getColumn() {
      return column_ == null ? io.jimdb.pb.Exprpb.ColumnInfo.getDefaultInstance() : column_;
    }
    /**
     * <pre>
     * left in optimization
     * </pre>
     *
     * <code>.dspb.ColumnInfo column = 2;</code>
     */
    public io.jimdb.pb.Exprpb.ColumnInfoOrBuilder getColumnOrBuilder() {
      return getColumn();
    }

    public static final int VALUE_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString value_;
    /**
     * <pre>
     * maybe left or right, but right in optimization
     * </pre>
     *
     * <code>bytes value = 3;</code>
     */
    public com.google.protobuf.ByteString getValue() {
      return value_;
    }

    public static final int CHILD_FIELD_NUMBER = 4;
    private java.util.List<io.jimdb.pb.Exprpb.Expr> child_;
    /**
     * <pre>
     * always 2 expr left and right, but LogicNot
     * </pre>
     *
     * <code>repeated .dspb.Expr child = 4;</code>
     */
    public java.util.List<io.jimdb.pb.Exprpb.Expr> getChildList() {
      return child_;
    }
    /**
     * <pre>
     * always 2 expr left and right, but LogicNot
     * </pre>
     *
     * <code>repeated .dspb.Expr child = 4;</code>
     */
    public java.util.List<? extends io.jimdb.pb.Exprpb.ExprOrBuilder>
        getChildOrBuilderList() {
      return child_;
    }
    /**
     * <pre>
     * always 2 expr left and right, but LogicNot
     * </pre>
     *
     * <code>repeated .dspb.Expr child = 4;</code>
     */
    public int getChildCount() {
      return child_.size();
    }
    /**
     * <pre>
     * always 2 expr left and right, but LogicNot
     * </pre>
     *
     * <code>repeated .dspb.Expr child = 4;</code>
     */
    public io.jimdb.pb.Exprpb.Expr getChild(int index) {
      return child_.get(index);
    }
    /**
     * <pre>
     * always 2 expr left and right, but LogicNot
     * </pre>
     *
     * <code>repeated .dspb.Expr child = 4;</code>
     */
    public io.jimdb.pb.Exprpb.ExprOrBuilder getChildOrBuilder(
        int index) {
      return child_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (exprType_ != io.jimdb.pb.Exprpb.ExprType.Invalid_Expr.getNumber()) {
        output.writeEnum(1, exprType_);
      }
      if (column_ != null) {
        output.writeMessage(2, getColumn());
      }
      if (!value_.isEmpty()) {
        output.writeBytes(3, value_);
      }
      for (int i = 0; i < child_.size(); i++) {
        output.writeMessage(4, child_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (exprType_ != io.jimdb.pb.Exprpb.ExprType.Invalid_Expr.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, exprType_);
      }
      if (column_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getColumn());
      }
      if (!value_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, value_);
      }
      for (int i = 0; i < child_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, child_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jimdb.pb.Exprpb.Expr)) {
        return super.equals(obj);
      }
      io.jimdb.pb.Exprpb.Expr other = (io.jimdb.pb.Exprpb.Expr) obj;

      boolean result = true;
      result = result && exprType_ == other.exprType_;
      result = result && (hasColumn() == other.hasColumn());
      if (hasColumn()) {
        result = result && getColumn()
            .equals(other.getColumn());
      }
      result = result && getValue()
          .equals(other.getValue());
      result = result && getChildList()
          .equals(other.getChildList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + EXPR_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + exprType_;
      if (hasColumn()) {
        hash = (37 * hash) + COLUMN_FIELD_NUMBER;
        hash = (53 * hash) + getColumn().hashCode();
      }
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      if (getChildCount() > 0) {
        hash = (37 * hash) + CHILD_FIELD_NUMBER;
        hash = (53 * hash) + getChildList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jimdb.pb.Exprpb.Expr parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jimdb.pb.Exprpb.Expr parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jimdb.pb.Exprpb.Expr parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jimdb.pb.Exprpb.Expr parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jimdb.pb.Exprpb.Expr parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jimdb.pb.Exprpb.Expr parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jimdb.pb.Exprpb.Expr parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jimdb.pb.Exprpb.Expr parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jimdb.pb.Exprpb.Expr parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jimdb.pb.Exprpb.Expr parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jimdb.pb.Exprpb.Expr parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jimdb.pb.Exprpb.Expr parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jimdb.pb.Exprpb.Expr prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dspb.Expr}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dspb.Expr)
        io.jimdb.pb.Exprpb.ExprOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jimdb.pb.Exprpb.internal_static_dspb_Expr_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jimdb.pb.Exprpb.internal_static_dspb_Expr_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jimdb.pb.Exprpb.Expr.class, io.jimdb.pb.Exprpb.Expr.Builder.class);
      }

      // Construct using io.jimdb.pb.Exprpb.Expr.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getChildFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        exprType_ = 0;

        if (columnBuilder_ == null) {
          column_ = null;
        } else {
          column_ = null;
          columnBuilder_ = null;
        }
        value_ = com.google.protobuf.ByteString.EMPTY;

        if (childBuilder_ == null) {
          child_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          childBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jimdb.pb.Exprpb.internal_static_dspb_Expr_descriptor;
      }

      @java.lang.Override
      public io.jimdb.pb.Exprpb.Expr getDefaultInstanceForType() {
        return io.jimdb.pb.Exprpb.Expr.getDefaultInstance();
      }

      @java.lang.Override
      public io.jimdb.pb.Exprpb.Expr build() {
        io.jimdb.pb.Exprpb.Expr result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jimdb.pb.Exprpb.Expr buildPartial() {
        io.jimdb.pb.Exprpb.Expr result = new io.jimdb.pb.Exprpb.Expr(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.exprType_ = exprType_;
        if (columnBuilder_ == null) {
          result.column_ = column_;
        } else {
          result.column_ = columnBuilder_.build();
        }
        result.value_ = value_;
        if (childBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            child_ = java.util.Collections.unmodifiableList(child_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.child_ = child_;
        } else {
          result.child_ = childBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jimdb.pb.Exprpb.Expr) {
          return mergeFrom((io.jimdb.pb.Exprpb.Expr)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jimdb.pb.Exprpb.Expr other) {
        if (other == io.jimdb.pb.Exprpb.Expr.getDefaultInstance()) return this;
        if (other.exprType_ != 0) {
          setExprTypeValue(other.getExprTypeValue());
        }
        if (other.hasColumn()) {
          mergeColumn(other.getColumn());
        }
        if (other.getValue() != com.google.protobuf.ByteString.EMPTY) {
          setValue(other.getValue());
        }
        if (childBuilder_ == null) {
          if (!other.child_.isEmpty()) {
            if (child_.isEmpty()) {
              child_ = other.child_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureChildIsMutable();
              child_.addAll(other.child_);
            }
            onChanged();
          }
        } else {
          if (!other.child_.isEmpty()) {
            if (childBuilder_.isEmpty()) {
              childBuilder_.dispose();
              childBuilder_ = null;
              child_ = other.child_;
              bitField0_ = (bitField0_ & ~0x00000008);
              childBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getChildFieldBuilder() : null;
            } else {
              childBuilder_.addAllMessages(other.child_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jimdb.pb.Exprpb.Expr parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jimdb.pb.Exprpb.Expr) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int exprType_ = 0;
      /**
       * <pre>
       * uint32
       * </pre>
       *
       * <code>.dspb.ExprType expr_type = 1;</code>
       */
      public int getExprTypeValue() {
        return exprType_;
      }
      /**
       * <pre>
       * uint32
       * </pre>
       *
       * <code>.dspb.ExprType expr_type = 1;</code>
       */
      public Builder setExprTypeValue(int value) {
        exprType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * uint32
       * </pre>
       *
       * <code>.dspb.ExprType expr_type = 1;</code>
       */
      public io.jimdb.pb.Exprpb.ExprType getExprType() {
        @SuppressWarnings("deprecation")
        io.jimdb.pb.Exprpb.ExprType result = io.jimdb.pb.Exprpb.ExprType.valueOf(exprType_);
        return result == null ? io.jimdb.pb.Exprpb.ExprType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * uint32
       * </pre>
       *
       * <code>.dspb.ExprType expr_type = 1;</code>
       */
      public Builder setExprType(io.jimdb.pb.Exprpb.ExprType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        exprType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * uint32
       * </pre>
       *
       * <code>.dspb.ExprType expr_type = 1;</code>
       */
      public Builder clearExprType() {
        
        exprType_ = 0;
        onChanged();
        return this;
      }

      private io.jimdb.pb.Exprpb.ColumnInfo column_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.jimdb.pb.Exprpb.ColumnInfo, io.jimdb.pb.Exprpb.ColumnInfo.Builder, io.jimdb.pb.Exprpb.ColumnInfoOrBuilder> columnBuilder_;
      /**
       * <pre>
       * left in optimization
       * </pre>
       *
       * <code>.dspb.ColumnInfo column = 2;</code>
       */
      public boolean hasColumn() {
        return columnBuilder_ != null || column_ != null;
      }
      /**
       * <pre>
       * left in optimization
       * </pre>
       *
       * <code>.dspb.ColumnInfo column = 2;</code>
       */
      public io.jimdb.pb.Exprpb.ColumnInfo getColumn() {
        if (columnBuilder_ == null) {
          return column_ == null ? io.jimdb.pb.Exprpb.ColumnInfo.getDefaultInstance() : column_;
        } else {
          return columnBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * left in optimization
       * </pre>
       *
       * <code>.dspb.ColumnInfo column = 2;</code>
       */
      public Builder setColumn(io.jimdb.pb.Exprpb.ColumnInfo value) {
        if (columnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          column_ = value;
          onChanged();
        } else {
          columnBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * left in optimization
       * </pre>
       *
       * <code>.dspb.ColumnInfo column = 2;</code>
       */
      public Builder setColumn(
          io.jimdb.pb.Exprpb.ColumnInfo.Builder builderForValue) {
        if (columnBuilder_ == null) {
          column_ = builderForValue.build();
          onChanged();
        } else {
          columnBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * left in optimization
       * </pre>
       *
       * <code>.dspb.ColumnInfo column = 2;</code>
       */
      public Builder mergeColumn(io.jimdb.pb.Exprpb.ColumnInfo value) {
        if (columnBuilder_ == null) {
          if (column_ != null) {
            column_ =
              io.jimdb.pb.Exprpb.ColumnInfo.newBuilder(column_).mergeFrom(value).buildPartial();
          } else {
            column_ = value;
          }
          onChanged();
        } else {
          columnBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * left in optimization
       * </pre>
       *
       * <code>.dspb.ColumnInfo column = 2;</code>
       */
      public Builder clearColumn() {
        if (columnBuilder_ == null) {
          column_ = null;
          onChanged();
        } else {
          column_ = null;
          columnBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * left in optimization
       * </pre>
       *
       * <code>.dspb.ColumnInfo column = 2;</code>
       */
      public io.jimdb.pb.Exprpb.ColumnInfo.Builder getColumnBuilder() {
        
        onChanged();
        return getColumnFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * left in optimization
       * </pre>
       *
       * <code>.dspb.ColumnInfo column = 2;</code>
       */
      public io.jimdb.pb.Exprpb.ColumnInfoOrBuilder getColumnOrBuilder() {
        if (columnBuilder_ != null) {
          return columnBuilder_.getMessageOrBuilder();
        } else {
          return column_ == null ?
              io.jimdb.pb.Exprpb.ColumnInfo.getDefaultInstance() : column_;
        }
      }
      /**
       * <pre>
       * left in optimization
       * </pre>
       *
       * <code>.dspb.ColumnInfo column = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.jimdb.pb.Exprpb.ColumnInfo, io.jimdb.pb.Exprpb.ColumnInfo.Builder, io.jimdb.pb.Exprpb.ColumnInfoOrBuilder>
          getColumnFieldBuilder() {
        if (columnBuilder_ == null) {
          columnBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.jimdb.pb.Exprpb.ColumnInfo, io.jimdb.pb.Exprpb.ColumnInfo.Builder, io.jimdb.pb.Exprpb.ColumnInfoOrBuilder>(
                  getColumn(),
                  getParentForChildren(),
                  isClean());
          column_ = null;
        }
        return columnBuilder_;
      }

      private com.google.protobuf.ByteString value_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * maybe left or right, but right in optimization
       * </pre>
       *
       * <code>bytes value = 3;</code>
       */
      public com.google.protobuf.ByteString getValue() {
        return value_;
      }
      /**
       * <pre>
       * maybe left or right, but right in optimization
       * </pre>
       *
       * <code>bytes value = 3;</code>
       */
      public Builder setValue(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * maybe left or right, but right in optimization
       * </pre>
       *
       * <code>bytes value = 3;</code>
       */
      public Builder clearValue() {
        
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }

      private java.util.List<io.jimdb.pb.Exprpb.Expr> child_ =
        java.util.Collections.emptyList();
      private void ensureChildIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          child_ = new java.util.ArrayList<io.jimdb.pb.Exprpb.Expr>(child_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jimdb.pb.Exprpb.Expr, io.jimdb.pb.Exprpb.Expr.Builder, io.jimdb.pb.Exprpb.ExprOrBuilder> childBuilder_;

      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public java.util.List<io.jimdb.pb.Exprpb.Expr> getChildList() {
        if (childBuilder_ == null) {
          return java.util.Collections.unmodifiableList(child_);
        } else {
          return childBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public int getChildCount() {
        if (childBuilder_ == null) {
          return child_.size();
        } else {
          return childBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public io.jimdb.pb.Exprpb.Expr getChild(int index) {
        if (childBuilder_ == null) {
          return child_.get(index);
        } else {
          return childBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public Builder setChild(
          int index, io.jimdb.pb.Exprpb.Expr value) {
        if (childBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChildIsMutable();
          child_.set(index, value);
          onChanged();
        } else {
          childBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public Builder setChild(
          int index, io.jimdb.pb.Exprpb.Expr.Builder builderForValue) {
        if (childBuilder_ == null) {
          ensureChildIsMutable();
          child_.set(index, builderForValue.build());
          onChanged();
        } else {
          childBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public Builder addChild(io.jimdb.pb.Exprpb.Expr value) {
        if (childBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChildIsMutable();
          child_.add(value);
          onChanged();
        } else {
          childBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public Builder addChild(
          int index, io.jimdb.pb.Exprpb.Expr value) {
        if (childBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChildIsMutable();
          child_.add(index, value);
          onChanged();
        } else {
          childBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public Builder addChild(
          io.jimdb.pb.Exprpb.Expr.Builder builderForValue) {
        if (childBuilder_ == null) {
          ensureChildIsMutable();
          child_.add(builderForValue.build());
          onChanged();
        } else {
          childBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public Builder addChild(
          int index, io.jimdb.pb.Exprpb.Expr.Builder builderForValue) {
        if (childBuilder_ == null) {
          ensureChildIsMutable();
          child_.add(index, builderForValue.build());
          onChanged();
        } else {
          childBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public Builder addAllChild(
          java.lang.Iterable<? extends io.jimdb.pb.Exprpb.Expr> values) {
        if (childBuilder_ == null) {
          ensureChildIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, child_);
          onChanged();
        } else {
          childBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public Builder clearChild() {
        if (childBuilder_ == null) {
          child_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          childBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public Builder removeChild(int index) {
        if (childBuilder_ == null) {
          ensureChildIsMutable();
          child_.remove(index);
          onChanged();
        } else {
          childBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public io.jimdb.pb.Exprpb.Expr.Builder getChildBuilder(
          int index) {
        return getChildFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public io.jimdb.pb.Exprpb.ExprOrBuilder getChildOrBuilder(
          int index) {
        if (childBuilder_ == null) {
          return child_.get(index);  } else {
          return childBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public java.util.List<? extends io.jimdb.pb.Exprpb.ExprOrBuilder>
           getChildOrBuilderList() {
        if (childBuilder_ != null) {
          return childBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(child_);
        }
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public io.jimdb.pb.Exprpb.Expr.Builder addChildBuilder() {
        return getChildFieldBuilder().addBuilder(
            io.jimdb.pb.Exprpb.Expr.getDefaultInstance());
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public io.jimdb.pb.Exprpb.Expr.Builder addChildBuilder(
          int index) {
        return getChildFieldBuilder().addBuilder(
            index, io.jimdb.pb.Exprpb.Expr.getDefaultInstance());
      }
      /**
       * <pre>
       * always 2 expr left and right, but LogicNot
       * </pre>
       *
       * <code>repeated .dspb.Expr child = 4;</code>
       */
      public java.util.List<io.jimdb.pb.Exprpb.Expr.Builder>
           getChildBuilderList() {
        return getChildFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jimdb.pb.Exprpb.Expr, io.jimdb.pb.Exprpb.Expr.Builder, io.jimdb.pb.Exprpb.ExprOrBuilder>
          getChildFieldBuilder() {
        if (childBuilder_ == null) {
          childBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jimdb.pb.Exprpb.Expr, io.jimdb.pb.Exprpb.Expr.Builder, io.jimdb.pb.Exprpb.ExprOrBuilder>(
                  child_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          child_ = null;
        }
        return childBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dspb.Expr)
    }

    // @@protoc_insertion_point(class_scope:dspb.Expr)
    private static final io.jimdb.pb.Exprpb.Expr DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jimdb.pb.Exprpb.Expr();
    }

    public static io.jimdb.pb.Exprpb.Expr getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Expr>
        PARSER = new com.google.protobuf.AbstractParser<Expr>() {
      @java.lang.Override
      public Expr parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Expr(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Expr> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Expr> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jimdb.pb.Exprpb.Expr getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dspb_ColumnInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dspb_ColumnInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dspb_Expr_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dspb_Expr_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017dspb/expr.proto\022\004dspb\032\023basepb/basepb.p" +
      "roto\"^\n\nColumnInfo\022\n\n\002id\030\001 \001(\r\022\035\n\003typ\030\002 " +
      "\001(\0162\020.basepb.DataType\022\020\n\010unsigned\030\003 \001(\010\022" +
      "\023\n\013reorg_value\030\004 \001(\014\"u\n\004Expr\022!\n\texpr_typ" +
      "e\030\001 \001(\0162\016.dspb.ExprType\022 \n\006column\030\002 \001(\0132" +
      "\020.dspb.ColumnInfo\022\r\n\005value\030\003 \001(\014\022\031\n\005chil" +
      "d\030\004 \003(\0132\n.dspb.Expr*\203)\n\010ExprType\022\020\n\014Inva" +
      "lid_Expr\020\000\022\n\n\006Column\020\001\022\r\n\tConst_Int\020\002\022\016\n" +
      "\nConst_UInt\020\003\022\020\n\014Const_Double\020\004\022\017\n\013Const" +
      "_Bytes\020\005\022\021\n\rConst_Decimal\020\006\022\016\n\nConst_Dat" +
      "e\020\007\022\016\n\nConst_Time\020\010\022\t\n\005Equal\020\024\022\014\n\010NotEqu" +
      "al\020\025\022\010\n\004Less\020\026\022\017\n\013LessOrEqual\020\027\022\n\n\006Large" +
      "r\020\030\022\021\n\rLargerOrEqual\020\031\022\010\n\003Avg\020\227\001\022\n\n\005Coun" +
      "t\020\230\001\022\010\n\003Max\020\231\001\022\010\n\003Min\020\232\001\022\010\n\003Sum\020\233\001\022\010\n\003St" +
      "d\020\234\001\022\r\n\010Distinct\020\235\001\022\r\n\010LogicAnd\020\311\001\022\014\n\007Lo" +
      "gicOr\020\312\001\022\r\n\010LogicNot\020\313\001\022\r\n\010LogicXor\020\314\001\022\r" +
      "\n\010UnaryNot\020\315\001\022\017\n\nUnaryMinus\020\316\001\022\013\n\006IsNull" +
      "\020\317\001\022\022\n\rDecimalIsNull\020\320\001\022\017\n\nDateIsNull\020\321\001" +
      "\022\017\n\nRealIsNull\020\322\001\022\021\n\014StringIsNull\020\323\001\022\017\n\n" +
      "TimeIsNull\020\324\001\022\016\n\tIntIsNull\020\325\001\022\017\n\nJsonIsN" +
      "ull\020\326\001\022\016\n\tIsNotNull\020\327\001\022\013\n\006IsTrue\020\330\001\022\014\n\007I" +
      "sFalse\020\331\001\022\016\n\tLeftShift\020\332\001\022\017\n\nRightShift\020" +
      "\333\001\022\021\n\014CastIntToInt\020\255\002\022\022\n\rCastIntToReal\020\256" +
      "\002\022\024\n\017CastIntToString\020\257\002\022\025\n\020CastIntToDeci" +
      "mal\020\260\002\022\022\n\rCastIntToTime\020\261\002\022\022\n\rCastIntToD" +
      "ate\020\262\002\022\022\n\rCastIntToJson\020\263\002\022\022\n\rCastRealTo" +
      "Int\020\264\002\022\023\n\016CastRealToReal\020\265\002\022\025\n\020CastRealT" +
      "oString\020\266\002\022\026\n\021CastRealToDecimal\020\267\002\022\023\n\016Ca" +
      "stRealToTime\020\270\002\022\023\n\016CastRealToDate\020\271\002\022\023\n\016" +
      "CastRealToJson\020\272\002\022\025\n\020CastDecimalToInt\020\273\002" +
      "\022\026\n\021CastDecimalToReal\020\274\002\022\030\n\023CastDecimalT" +
      "oString\020\275\002\022\031\n\024CastDecimalToDecimal\020\276\002\022\026\n" +
      "\021CastDecimalToTime\020\277\002\022\026\n\021CastDecimalToDa" +
      "te\020\300\002\022\026\n\021CastDecimalToJson\020\301\002\022\024\n\017CastStr" +
      "ingToInt\020\302\002\022\025\n\020CastStringToReal\020\303\002\022\027\n\022Ca" +
      "stStringToString\020\304\002\022\030\n\023CastStringToDecim" +
      "al\020\305\002\022\025\n\020CastStringToTime\020\306\002\022\025\n\020CastStri" +
      "ngToDate\020\307\002\022\025\n\020CastStringToJson\020\310\002\022\022\n\rCa" +
      "stTimeToInt\020\311\002\022\023\n\016CastTimeToReal\020\312\002\022\025\n\020C" +
      "astTimeToString\020\313\002\022\026\n\021CastTimeToDecimal\020" +
      "\314\002\022\023\n\016CastTimeToTime\020\315\002\022\023\n\016CastTimeToDat" +
      "e\020\316\002\022\023\n\016CastTimeToJson\020\317\002\022\022\n\rCastDateToI" +
      "nt\020\320\002\022\023\n\016CastDateToReal\020\321\002\022\025\n\020CastDateTo" +
      "String\020\322\002\022\026\n\021CastDateToDecimal\020\323\002\022\023\n\016Cas" +
      "tDateToTime\020\324\002\022\023\n\016CastDateToDate\020\325\002\022\023\n\016C" +
      "astDateToJson\020\326\002\022\022\n\rCastJsonToInt\020\327\002\022\023\n\016" +
      "CastJsonToReal\020\330\002\022\025\n\020CastJsonToString\020\331\002" +
      "\022\026\n\021CastJsonToDecimal\020\332\002\022\023\n\016CastJsonToTi" +
      "me\020\333\002\022\023\n\016CastJsonToDate\020\334\002\022\023\n\016CastJsonTo" +
      "Json\020\335\002\022\r\n\010Coalesce\020\221\003\022\r\n\010EqualInt\020\222\003\022\016\n" +
      "\tEqualReal\020\223\003\022\020\n\013EqualString\020\224\003\022\021\n\014Equal" +
      "Decimal\020\225\003\022\016\n\tEqualTime\020\226\003\022\016\n\tEqualDate\020" +
      "\227\003\022\016\n\tEqualJson\020\230\003\022\020\n\013NotEqualInt\020\231\003\022\021\n\014" +
      "NotEqualReal\020\232\003\022\024\n\017NotEqualDecimal\020\233\003\022\023\n" +
      "\016NotEqualString\020\234\003\022\021\n\014NotEqualTime\020\235\003\022\021\n" +
      "\014NotEqualDate\020\236\003\022\021\n\014NotEqualJson\020\237\003\022\014\n\007L" +
      "essInt\020\240\003\022\r\n\010LessReal\020\241\003\022\020\n\013LessDecimal\020" +
      "\242\003\022\017\n\nLessString\020\243\003\022\r\n\010LessTime\020\244\003\022\r\n\010Le" +
      "ssDate\020\245\003\022\r\n\010LessJson\020\246\003\022\023\n\016LessOrEqualI" +
      "nt\020\247\003\022\024\n\017LessOrEqualReal\020\250\003\022\027\n\022LessOrEqu" +
      "alDecimal\020\251\003\022\026\n\021LessOrEqualString\020\252\003\022\024\n\017" +
      "LessOrEqualTime\020\253\003\022\024\n\017LessOrEqualDate\020\254\003" +
      "\022\024\n\017LessOrEqualJson\020\255\003\022\017\n\nGreaterInt\020\256\003\022" +
      "\020\n\013GreaterReal\020\257\003\022\023\n\016GreaterDecimal\020\260\003\022\022" +
      "\n\rGreaterString\020\261\003\022\020\n\013GreaterTime\020\262\003\022\020\n\013" +
      "GreaterDate\020\263\003\022\020\n\013GreaterJson\020\264\003\022\026\n\021Grea" +
      "terOrEqualInt\020\265\003\022\027\n\022GreaterOrEqualReal\020\266" +
      "\003\022\032\n\025GreaterOrEqualDecimal\020\267\003\022\031\n\024Greater" +
      "OrEqualString\020\270\003\022\027\n\022GreaterOrEqualTime\020\271" +
      "\003\022\027\n\022GreaterOrEqualDate\020\272\003\022\027\n\022GreaterOrE" +
      "qualJson\020\273\003\022\t\n\004Like\020\274\003\022\014\n\007NotLike\020\275\003\022\017\n\n" +
      "RegexpLike\020\276\003\022\013\n\006Regexp\020\277\003\022\016\n\tNotRegexp\020" +
      "\300\003\022\007\n\002IN\020\301\003\022\t\n\004Plus\020\247\004\022\r\n\010PlusReal\020\250\004\022\020\n" +
      "\013PlusDecimal\020\251\004\022\014\n\007PlusInt\020\252\004\022\n\n\005Minus\020\261" +
      "\004\022\016\n\tMinusReal\020\262\004\022\021\n\014MinusDecimal\020\263\004\022\r\n\010" +
      "MinusInt\020\264\004\022\t\n\004Mult\020\273\004\022\r\n\010MultReal\020\274\004\022\020\n" +
      "\013MultDecimal\020\275\004\022\014\n\007MultInt\020\276\004\022\024\n\017MultInt" +
      "Unsigned\020\277\004\022\010\n\003Div\020\305\004\022\014\n\007DivReal\020\306\004\022\017\n\nD" +
      "ivDecimal\020\307\004\022\016\n\tIntDivInt\020\310\004\022\022\n\rIntDivDe" +
      "cimal\020\311\004\022\010\n\003Mod\020\317\004\022\014\n\007ModReal\020\320\004\022\017\n\nModD" +
      "ecimal\020\321\004\022\013\n\006ModInt\020\322\004\022\010\n\003Abs\020\275\005\022\t\n\004Ceil" +
      "\020\276\005\022\n\n\005Floor\020\277\005\022\n\n\005Round\020\300\005\022\t\n\004Rand\020\301\005\022\t" +
      "\n\004Conv\020\302\005\022\n\n\005CRC32\020\303\005\022\014\n\007Degrees\020\304\005\022\010\n\003E" +
      "xp\020\305\005\022\t\n\004Acos\020\306\005\022\t\n\004Asin\020\307\005\022\t\n\004Atan\020\310\005\022\n" +
      "\n\005Atan2\020\311\005\022\010\n\003Cos\020\312\005\022\010\n\003Cot\020\313\005\022\007\n\002Ln\020\314\005\022" +
      "\010\n\003Log\020\315\005\022\n\n\005Log10\020\316\005\022\t\n\004Log2\020\317\005\022\007\n\002PI\020\320" +
      "\005\022\010\n\003Pow\020\321\005\022\014\n\007Radians\020\322\005\022\t\n\004Sign\020\323\005\022\010\n\003" +
      "Sin\020\324\005\022\t\n\004Sqrt\020\325\005\022\010\n\003Tan\020\326\005\022\r\n\010Truncate\020" +
      "\327\005\022\r\n\010CaseWhen\020\357\005\022\007\n\002If\020\360\005\022\n\n\005IfInt\020\361\005\022\013" +
      "\n\006IfReal\020\362\005\022\016\n\tIfDecimal\020\363\005\022\r\n\010IfString\020" +
      "\364\005\022\013\n\006IfTime\020\365\005\022\013\n\006IfDate\020\366\005\022\017\n\nIfNullJs" +
      "on\020\367\005\022\013\n\006IfJson\020\370\005\022\013\n\006IfNull\020\371\005\022\020\n\013Aes_d" +
      "ecrypt\020\205\007\022\020\n\013Aes_encrypt\020\206\007\022\r\n\010Compress\020" +
      "\207\007\022\017\n\nUncompress\020\210\007\022\010\n\003Md5\020\211\007\022\r\n\010Passwor" +
      "d\020\212\007\022\t\n\004SHA1\020\213\007\022\t\n\004SHA2\020\214\007\022\n\n\005Ascii\020\261\t\022\010" +
      "\n\003Bin\020\262\t\022\017\n\nBit_length\020\263\t\022\t\n\004Char\020\264\t\022\020\n\013" +
      "Char_length\020\265\t\022\025\n\020Character_length\020\266\t\022\013\n" +
      "\006Concat\020\267\t\022\016\n\tConcat_ws\020\270\t\022\010\n\003Elt\020\271\t\022\017\n\n" +
      "Export_set\020\272\t\022\n\n\005Field\020\273\t\022\020\n\013Find_in_set" +
      "\020\274\t\022\013\n\006Format\020\275\t\022\020\n\013From_base64\020\276\t\022\010\n\003He" +
      "x\020\277\t\022\013\n\006Insert\020\300\t\022\n\n\005Instr\020\301\t\022\n\n\005Lcase\020\302" +
      "\t\022\t\n\004Left\020\303\t\022\013\n\006Length\020\304\t\022\r\n\010Str_Like\020\305\t" +
      "\022\016\n\tLoad_file\020\306\t\022\013\n\006Locate\020\307\t\022\n\n\005Lower\020\310" +
      "\t\022\t\n\004Lpad\020\311\t\022\n\n\005Ltrim\020\312\t\022\r\n\010Make_set\020\313\t\022" +
      "\n\n\005Match\020\314\t\022\010\n\003Mid\020\315\t\022\021\n\014Str_Not_like\020\316\t" +
      "\022\023\n\016Str_Not_regexp\020\317\t\022\010\n\003Oct\020\320\t\022\021\n\014Octet" +
      "_length\020\321\t\022\010\n\003Ord\020\322\t\022\r\n\010Position\020\323\t\022\n\n\005Q" +
      "uote\020\324\t\022\016\n\tStrRegexp\020\325\t\022\013\n\006Repeat\020\326\t\022\014\n\007" +
      "Replace\020\327\t\022\014\n\007Reverse\020\330\t\022\n\n\005Right\020\331\t\022\n\n\005" +
      "Rlike\020\332\t\022\t\n\004Rpad\020\333\t\022\n\n\005Rtrim\020\334\t\022\014\n\007Sound" +
      "ex\020\335\t\022\017\n\nSoundsLike\020\336\t\022\n\n\005Space\020\337\t\022\013\n\006St" +
      "rcmp\020\340\t\022\013\n\006Substr\020\341\t\022\016\n\tSubstring\020\342\t\022\023\n\016" +
      "SubstringIndex\020\343\t\022\r\n\010ToBase64\020\344\t\022\t\n\004Trim" +
      "\020\345\t\022\n\n\005Ucase\020\346\t\022\n\n\005Unhex\020\347\t\022\n\n\005Upper\020\350\t\022" +
      "\021\n\014WeightString\020\351\t\022\014\n\007Adddate\020\321\017\022\014\n\007Addt" +
      "ime\020\322\017\022\017\n\nConvert_tz\020\323\017\022\014\n\007Curdate\020\324\017\022\020\n" +
      "\013CurrentDate\020\325\017\022\020\n\013CurrentTime\020\326\017\022\025\n\020Cur" +
      "rentTimestamp\020\327\017\022\014\n\007Curtime\020\330\017\022\t\n\004Date\020\331" +
      "\017\022\r\n\010Date_add\020\332\017\022\020\n\013Date_format\020\333\017\022\r\n\010Da" +
      "te_sub\020\334\017\022\r\n\010Datediff\020\335\017\022\010\n\003Day\020\336\017\022\014\n\007Da" +
      "yname\020\337\017\022\017\n\nDayofmonth\020\340\017\022\016\n\tDayofweek\020\341" +
      "\017\022\016\n\tDayofyear\020\342\017\022\014\n\007Extract\020\343\017\022\016\n\tFrom_" +
      "days\020\344\017\022\022\n\rFrom_unixtime\020\345\017\022\017\n\nGet_forma" +
      "t\020\346\017\022\t\n\004Hour\020\347\017\022\r\n\010Last_day\020\350\017\022\016\n\tLocalt" +
      "ime\020\351\017\022\023\n\016Localtimestamp\020\352\017\022\r\n\010Makedate\020" +
      "\353\017\022\r\n\010Maketime\020\354\017\022\020\n\013Microsecond\020\355\017\022\013\n\006M" +
      "inute\020\356\017\022\n\n\005Month\020\357\017\022\016\n\tMonthname\020\360\017\022\010\n\003" +
      "Now\020\361\017\022\017\n\nPeriod_add\020\362\017\022\020\n\013Period_diff\020\363" +
      "\017\022\014\n\007Quarter\020\364\017\022\020\n\013Sec_to_time\020\365\017\022\013\n\006Sec" +
      "ond\020\366\017\022\020\n\013Str_to_date\020\367\017\022\014\n\007Subdate\020\370\017\022\014" +
      "\n\007Subtime\020\371\017\022\014\n\007Sysdate\020\372\017\022\t\n\004Time\020\373\017\022\020\n" +
      "\013Time_format\020\374\017\022\020\n\013Time_to_sec\020\375\017\022\r\n\010Tim" +
      "ediff\020\376\017\022\016\n\tTimestamp\020\377\017\022\021\n\014Timestampadd" +
      "\020\200\020\022\022\n\rTimestampdiff\020\201\020\022\014\n\007To_days\020\202\020\022\017\n" +
      "\nTo_seconds\020\203\020\022\023\n\016Unix_timestamp\020\204\020\022\r\n\010U" +
      "tc_date\020\205\020\022\r\n\010Utc_time\020\206\020\022\022\n\rUtc_timesta" +
      "mp\020\207\020\022\t\n\004Week\020\210\020\022\014\n\007Weekday\020\211\020\022\017\n\nWeekof" +
      "year\020\212\020\022\t\n\004Year\020\213\020\022\r\n\010Yearweek\020\214\020B\032\n\020io." +
      "chubao.jim.pbB\006Exprpbb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.jimdb.pb.Basepb.getDescriptor(),
        }, assigner);
    internal_static_dspb_ColumnInfo_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dspb_ColumnInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dspb_ColumnInfo_descriptor,
        new java.lang.String[] { "Id", "Typ", "Unsigned", "ReorgValue", });
    internal_static_dspb_Expr_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dspb_Expr_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dspb_Expr_descriptor,
        new java.lang.String[] { "ExprType", "Column", "Value", "Child", });
    io.jimdb.pb.Basepb.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
